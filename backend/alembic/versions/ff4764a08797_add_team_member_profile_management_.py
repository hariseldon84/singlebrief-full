"""Add team member profile management system for Story 7.1

Revision ID: ff4764a08797
Revises: auth_tables_001
Create Date: 2025-08-08 22:09:05.036682

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ff4764a08797'
down_revision: Union[str, Sequence[str], None] = 'auth_tables_001'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('connectors',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('connector_type', sa.String(length=50), nullable=False, comment='Connector type: slack, teams, gmail, etc.'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Human-readable connector name'),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('version', sa.String(length=20), nullable=False, comment='Semantic version of the connector'),
    sa.Column('min_framework_version', sa.String(length=20), nullable=False, comment='Minimum required framework version'),
    sa.Column('developer', sa.String(length=100), nullable=False),
    sa.Column('homepage_url', sa.String(length=500), nullable=True),
    sa.Column('documentation_url', sa.String(length=500), nullable=True),
    sa.Column('support_url', sa.String(length=500), nullable=True),
    sa.Column('capabilities', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='List of connector capabilities'),
    sa.Column('required_scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='OAuth scopes required by this connector'),
    sa.Column('supported_auth_types', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Authentication types: oauth2, api_key, basic, custom'),
    sa.Column('config_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='JSON schema for connector configuration'),
    sa.Column('default_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Default configuration values'),
    sa.Column('default_rate_limit_hour', sa.Integer(), nullable=True),
    sa.Column('default_rate_limit_day', sa.Integer(), nullable=True),
    sa.Column('burst_limit', sa.Integer(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: active, deprecated, archived, experimental'),
    sa.Column('is_official', sa.Boolean(), nullable=False, comment='Whether this is an official connector'),
    sa.Column('is_verified', sa.Boolean(), nullable=False, comment='Whether this connector is verified'),
    sa.Column('package_url', sa.String(length=500), nullable=True, comment='URL to downloadable package'),
    sa.Column('install_script', sa.Text(), nullable=True, comment='Installation script or instructions'),
    sa.Column('checksum', sa.String(length=128), nullable=True, comment='Package checksum for verification'),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of connector dependencies'),
    sa.Column('conflicts', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of conflicting connectors'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("status IN ('active', 'deprecated', 'archived', 'experimental')", name='check_connector_status'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('connector_type', 'version', name='uq_connector_type_version')
    )
    op.create_index('idx_connectors_status', 'connectors', ['status'], unique=False)
    op.create_index('idx_connectors_type', 'connectors', ['connector_type'], unique=False)
    op.create_index('idx_connectors_version', 'connectors', ['version'], unique=False)
    op.create_table('connector_health_checks',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('connector_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True, comment='Organization-specific health check, null for global'),
    sa.Column('check_type', sa.String(length=50), nullable=False, comment='Type: connectivity, authentication, quota, performance'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: healthy, degraded, unhealthy, unknown'),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('success_rate', sa.Float(), nullable=True),
    sa.Column('error_rate', sa.Float(), nullable=True),
    sa.Column('throughput_per_minute', sa.Integer(), nullable=True),
    sa.Column('cpu_usage_percent', sa.Float(), nullable=True),
    sa.Column('memory_usage_mb', sa.Integer(), nullable=True),
    sa.Column('disk_usage_mb', sa.Integer(), nullable=True),
    sa.Column('network_usage_kb', sa.Integer(), nullable=True),
    sa.Column('message', sa.Text(), nullable=True),
    sa.Column('details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Detailed health check results'),
    sa.Column('recommendations', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Health improvement recommendations'),
    sa.Column('check_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional context and metadata'),
    sa.Column('external_service_status', sa.String(length=50), nullable=True, comment='Status of the external service'),
    sa.Column('checked_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('next_check_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("check_type IN ('connectivity', 'authentication', 'quota', 'performance', 'resource')", name='check_health_check_type'),
    sa.CheckConstraint("status IN ('healthy', 'degraded', 'unhealthy', 'unknown')", name='check_health_check_status'),
    sa.ForeignKeyConstraint(['connector_id'], ['connectors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_connector_health_checks_connector_checked', 'connector_health_checks', ['connector_id', 'checked_at'], unique=False)
    op.create_index('idx_connector_health_checks_org', 'connector_health_checks', ['organization_id'], unique=False)
    op.create_index('idx_connector_health_checks_status', 'connector_health_checks', ['status'], unique=False)
    op.create_index('idx_connector_health_checks_type', 'connector_health_checks', ['check_type'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='User who performed the action, null for system actions'),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('action_type', sa.String(length=50), nullable=False, comment='Type of action: create, read, update, delete, login, logout, etc.'),
    sa.Column('resource_type', sa.String(length=50), nullable=False, comment='Type of resource: user, conversation, memory, integration, etc.'),
    sa.Column('resource_id', sa.String(length=255), nullable=True, comment='ID of the specific resource affected'),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False, comment='Category: authentication, data_access, privacy, security, system'),
    sa.Column('severity', sa.String(length=20), nullable=False, comment='Severity level: debug, info, warning, error, critical'),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Previous values for update operations'),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='New values for create/update operations'),
    sa.Column('audit_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional context and metadata'),
    sa.Column('risk_level', sa.String(length=20), nullable=False, comment='Risk level: low, medium, high, critical'),
    sa.Column('compliance_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Compliance framework flags: gdpr, ccpa, hipaa, sox, etc.'),
    sa.Column('retention_period_days', sa.Integer(), nullable=False, comment='Days to retain this audit record'),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("action_type IN ('create', 'read', 'update', 'delete', 'login', 'logout', 'access', 'export', 'import', 'sync', 'configure', 'grant', 'revoke')", name='check_action_type'),
    sa.CheckConstraint("category IN ('authentication', 'data_access', 'privacy', 'security', 'system', 'integration', 'memory', 'billing')", name='check_audit_category'),
    sa.CheckConstraint("risk_level IN ('low', 'medium', 'high', 'critical')", name='check_risk_level'),
    sa.CheckConstraint("severity IN ('debug', 'info', 'warning', 'error', 'critical')", name='check_audit_severity'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_logs_action_type', 'audit_logs', ['action_type'], unique=False)
    op.create_index('idx_audit_logs_category', 'audit_logs', ['category'], unique=False)
    op.create_index('idx_audit_logs_created', 'audit_logs', ['created_at'], unique=False)
    op.create_index('idx_audit_logs_org_created', 'audit_logs', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_logs_risk', 'audit_logs', ['risk_level'], unique=False)
    op.create_index('idx_audit_logs_session', 'audit_logs', ['session_id'], unique=False)
    op.create_index('idx_audit_logs_severity', 'audit_logs', ['severity'], unique=False)
    op.create_index('idx_audit_logs_user_created', 'audit_logs', ['user_id', 'created_at'], unique=False)
    op.create_table('brief_templates',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('template_type', sa.String(length=50), nullable=False, comment='Type: daily_brief, weekly_summary, project_update, custom'),
    sa.Column('category', sa.String(length=50), nullable=False, comment='Category: executive, operational, technical, project'),
    sa.Column('template_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Template structure and schema definition'),
    sa.Column('sections', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Template sections and their configuration'),
    sa.Column('generation_prompt', sa.Text(), nullable=False, comment='Prompt template for AI generation'),
    sa.Column('data_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Required data sources and types'),
    sa.Column('output_format', sa.String(length=20), nullable=False, comment='Output format: markdown, html, json'),
    sa.Column('default_scope', sa.String(length=20), nullable=False, comment='Default scope: personal, team, organization'),
    sa.Column('default_time_range_hours', sa.Integer(), nullable=False, comment='Default time range in hours'),
    sa.Column('priority_sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Priority data sources for this template'),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('average_rating', sa.Float(), nullable=True, comment='Average user rating 1.0-5.0'),
    sa.Column('rating_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("category IN ('executive', 'operational', 'technical', 'project', 'team')", name='check_template_category'),
    sa.CheckConstraint("default_scope IN ('personal', 'team', 'organization')", name='check_template_default_scope'),
    sa.CheckConstraint("output_format IN ('markdown', 'html', 'json', 'plain_text')", name='check_template_output_format'),
    sa.CheckConstraint("template_type IN ('daily_brief', 'weekly_summary', 'project_update', 'custom', 'team_update')", name='check_template_type'),
    sa.CheckConstraint('average_rating IS NULL OR (average_rating >= 1.0 AND average_rating <= 5.0)', name='check_template_rating_range'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'name', name='uq_org_template_name')
    )
    op.create_index('idx_brief_templates_active', 'brief_templates', ['is_active'], unique=False)
    op.create_index('idx_brief_templates_category', 'brief_templates', ['category'], unique=False)
    op.create_index('idx_brief_templates_org', 'brief_templates', ['organization_id'], unique=False)
    op.create_index('idx_brief_templates_public', 'brief_templates', ['is_public'], unique=False)
    op.create_index('idx_brief_templates_rating', 'brief_templates', ['average_rating'], unique=False)
    op.create_index('idx_brief_templates_type', 'brief_templates', ['template_type'], unique=False)
    op.create_table('configuration_templates',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('connector_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('use_case', sa.String(length=100), nullable=False, comment='Use case: basic, advanced, enterprise, custom'),
    sa.Column('category', sa.String(length=50), nullable=False, comment='Category: security, performance, compliance, integration'),
    sa.Column('template_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Template configuration values'),
    sa.Column('required_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Variables that must be provided by user'),
    sa.Column('optional_variables', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Optional variables with defaults'),
    sa.Column('validation_rules', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Validation rules for template configuration'),
    sa.Column('dependencies', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Dependencies required for this template'),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Float(), nullable=True),
    sa.Column('is_official', sa.Boolean(), nullable=False),
    sa.Column('is_featured', sa.Boolean(), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True, comment='Organization template belongs to, null for public'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: active, deprecated, archived'),
    sa.Column('visibility', sa.String(length=20), nullable=False, comment='Visibility: public, private, organization'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("status IN ('active', 'deprecated', 'archived')", name='check_template_status'),
    sa.CheckConstraint("use_case IN ('basic', 'advanced', 'enterprise', 'custom')", name='check_template_use_case'),
    sa.CheckConstraint("visibility IN ('public', 'private', 'organization')", name='check_template_visibility'),
    sa.ForeignKeyConstraint(['connector_id'], ['connectors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_configuration_templates_category', 'configuration_templates', ['category'], unique=False)
    op.create_index('idx_configuration_templates_connector', 'configuration_templates', ['connector_id'], unique=False)
    op.create_index('idx_configuration_templates_status', 'configuration_templates', ['status'], unique=False)
    op.create_index('idx_configuration_templates_use_case', 'configuration_templates', ['use_case'], unique=False)
    op.create_index('idx_configuration_templates_visibility', 'configuration_templates', ['visibility'], unique=False)
    op.create_table('connector_installations',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('connector_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('installed_by_user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('installation_config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Organization-specific connector configuration'),
    sa.Column('environment', sa.String(length=20), nullable=False, comment='Environment: production, staging, development'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: installed, updating, disabled, failed, uninstalling'),
    sa.Column('health_status', sa.String(length=20), nullable=False, comment='Health: healthy, degraded, unhealthy, unknown'),
    sa.Column('last_health_check', sa.DateTime(timezone=True), nullable=True),
    sa.Column('auto_update', sa.Boolean(), nullable=False),
    sa.Column('update_channel', sa.String(length=20), nullable=False, comment='Update channel: stable, beta, alpha'),
    sa.Column('pending_update_version', sa.String(length=20), nullable=True),
    sa.Column('last_update_check', sa.DateTime(timezone=True), nullable=True),
    sa.Column('total_integrations', sa.Integer(), nullable=False),
    sa.Column('active_integrations', sa.Integer(), nullable=False),
    sa.Column('total_api_calls', sa.Integer(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=False),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('last_error_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('installed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("environment IN ('production', 'staging', 'development')", name='check_installation_environment'),
    sa.CheckConstraint("health_status IN ('healthy', 'degraded', 'unhealthy', 'unknown')", name='check_installation_health_status'),
    sa.CheckConstraint("status IN ('installed', 'updating', 'disabled', 'failed', 'uninstalling')", name='check_installation_status'),
    sa.CheckConstraint("update_channel IN ('stable', 'beta', 'alpha')", name='check_update_channel'),
    sa.ForeignKeyConstraint(['connector_id'], ['connectors.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['installed_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('connector_id', 'organization_id', name='uq_connector_org_installation')
    )
    op.create_index('idx_connector_installations_connector', 'connector_installations', ['connector_id'], unique=False)
    op.create_index('idx_connector_installations_health', 'connector_installations', ['health_status'], unique=False)
    op.create_index('idx_connector_installations_org', 'connector_installations', ['organization_id'], unique=False)
    op.create_index('idx_connector_installations_status', 'connector_installations', ['status'], unique=False)
    op.create_table('consent_records',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('consent_type', sa.String(length=50), nullable=False, comment='Type: data_processing, memory_storage, team_sharing, integration_access'),
    sa.Column('purpose', sa.String(length=100), nullable=False, comment='Specific purpose for consent'),
    sa.Column('scope', sa.String(length=50), nullable=False, comment='Scope: user, team, organization, global'),
    sa.Column('consent_given', sa.Boolean(), nullable=False),
    sa.Column('consent_version', sa.String(length=20), nullable=False, comment='Version of privacy policy/terms when consent was given'),
    sa.Column('consent_method', sa.String(length=50), nullable=False, comment='Method: explicit_click, implicit_use, email_confirmation, admin_grant'),
    sa.Column('legal_basis', sa.String(length=50), nullable=False, comment='GDPR legal basis: consent, contract, legal_obligation, vital_interests, public_task, legitimate_interests'),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Categories of data covered by this consent'),
    sa.Column('processing_activities', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Specific processing activities covered'),
    sa.Column('third_parties', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Third parties data may be shared with'),
    sa.Column('geographic_scope', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Geographic regions where consent applies'),
    sa.Column('retention_period_days', sa.Integer(), nullable=True, comment='Data retention period in days'),
    sa.Column('can_be_withdrawn', sa.Boolean(), nullable=False),
    sa.Column('withdrawal_instructions', sa.Text(), nullable=True),
    sa.Column('withdrawn_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('withdrawal_reason', sa.Text(), nullable=True),
    sa.Column('given_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("consent_method IN ('explicit_click', 'implicit_use', 'email_confirmation', 'admin_grant', 'api_acceptance')", name='check_consent_method'),
    sa.CheckConstraint("consent_type IN ('data_processing', 'memory_storage', 'team_sharing', 'integration_access', 'analytics', 'marketing')", name='check_consent_type'),
    sa.CheckConstraint("legal_basis IN ('consent', 'contract', 'legal_obligation', 'vital_interests', 'public_task', 'legitimate_interests')", name='check_legal_basis'),
    sa.CheckConstraint("scope IN ('user', 'team', 'organization', 'global')", name='check_consent_scope'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'consent_type', 'purpose', name='uq_user_consent_purpose')
    )
    op.create_index('idx_consent_records_created', 'consent_records', ['created_at'], unique=False)
    op.create_index('idx_consent_records_expires', 'consent_records', ['expires_at'], unique=False)
    op.create_index('idx_consent_records_given', 'consent_records', ['consent_given'], unique=False)
    op.create_index('idx_consent_records_org_type', 'consent_records', ['organization_id', 'consent_type'], unique=False)
    op.create_index('idx_consent_records_user_type', 'consent_records', ['user_id', 'consent_type'], unique=False)
    op.create_table('conversations',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('team_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('context_type', sa.String(length=50), nullable=False, comment='Type of conversation: daily_brief, ad_hoc_query, team_interrogation'),
    sa.Column('session_id', sa.String(length=255), nullable=False),
    sa.Column('is_shared_with_team', sa.Boolean(), nullable=False),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('retention_policy', sa.String(length=50), nullable=False, comment='Retention policy: standard, extended, permanent, delete_on_request'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_activity_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("context_type IN ('daily_brief', 'ad_hoc_query', 'team_interrogation', 'memory_query')", name='check_conversation_context_type'),
    sa.CheckConstraint("retention_policy IN ('standard', 'extended', 'permanent', 'delete_on_request')", name='check_retention_policy'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_conversations_context_type', 'conversations', ['context_type'], unique=False)
    op.create_index('idx_conversations_session', 'conversations', ['session_id'], unique=False)
    op.create_index('idx_conversations_team_created', 'conversations', ['team_id', 'created_at'], unique=False)
    op.create_index('idx_conversations_user_created', 'conversations', ['user_id', 'created_at'], unique=False)
    op.create_table('data_export_requests',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('export_type', sa.String(length=50), nullable=False, comment='Type: full_export, partial_export, specific_data, gdpr_export'),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Categories of data to export'),
    sa.Column('export_format', sa.String(length=20), nullable=False, comment='Format: json, csv, xml, pdf'),
    sa.Column('date_range_start', sa.DateTime(timezone=True), nullable=True, comment='Start date for data export (null = all time)'),
    sa.Column('date_range_end', sa.DateTime(timezone=True), nullable=True, comment='End date for data export (null = until now)'),
    sa.Column('additional_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional filters for data export'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, processing, completed, failed, expired'),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('export_file_path', sa.String(length=500), nullable=True, comment='Path to generated export file'),
    sa.Column('export_file_size', sa.Integer(), nullable=True, comment='Size of export file in bytes'),
    sa.Column('record_count', sa.Integer(), nullable=True, comment='Number of records exported'),
    sa.Column('download_token', sa.String(length=255), nullable=True, comment='Secure token for downloading export'),
    sa.Column('download_expires_at', sa.DateTime(timezone=True), nullable=True, comment='When download link expires'),
    sa.Column('download_count', sa.Integer(), nullable=False, comment='Number of times export was downloaded'),
    sa.Column('error_message', sa.Text(), nullable=True, comment='Error message if export failed'),
    sa.Column('retry_count', sa.Integer(), nullable=False, comment='Number of retry attempts'),
    sa.Column('requested_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("export_format IN ('json', 'csv', 'xml', 'pdf')", name='check_export_format'),
    sa.CheckConstraint("export_type IN ('full_export', 'partial_export', 'specific_data', 'gdpr_export')", name='check_export_type'),
    sa.CheckConstraint("status IN ('pending', 'processing', 'completed', 'failed', 'expired')", name='check_export_status'),
    sa.CheckConstraint('date_range_start IS NULL OR date_range_end IS NULL OR date_range_start <= date_range_end', name='check_date_range_order'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_data_export_requests_expires', 'data_export_requests', ['download_expires_at'], unique=False)
    op.create_index('idx_data_export_requests_requested', 'data_export_requests', ['requested_at'], unique=False)
    op.create_index('idx_data_export_requests_user_status', 'data_export_requests', ['user_id', 'status'], unique=False)
    op.create_table('data_retention_policies',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='User-specific policy (null for organization default)'),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('data_category', sa.String(length=50), nullable=False, comment='Category: conversations, decisions, user_memories, team_memories, preferences'),
    sa.Column('retention_period_days', sa.Integer(), nullable=False, comment='Number of days to retain data (0 = indefinite)'),
    sa.Column('archive_after_days', sa.Integer(), nullable=True, comment='Days after which to archive data (optional)'),
    sa.Column('action_on_expiry', sa.String(length=20), nullable=False, comment='Action: delete, archive, anonymize, prompt_user'),
    sa.Column('notification_days_before', sa.Integer(), nullable=True, comment='Days before expiry to notify user'),
    sa.Column('policy_source', sa.String(length=50), nullable=False, comment='Source: user_preference, organization_default, legal_requirement, system_default'),
    sa.Column('compliance_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of compliance frameworks this policy satisfies'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_overridable', sa.Boolean(), nullable=False, comment='Whether users can override this policy'),
    sa.Column('effective_from', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('effective_until', sa.DateTime(timezone=True), nullable=True, comment='When this policy expires'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("action_on_expiry IN ('delete', 'archive', 'anonymize', 'prompt_user')", name='check_action_on_expiry'),
    sa.CheckConstraint("data_category IN ('conversations', 'decisions', 'user_memories', 'team_memories', 'preferences')", name='check_data_category'),
    sa.CheckConstraint("policy_source IN ('user_preference', 'organization_default', 'legal_requirement', 'system_default')", name='check_policy_source'),
    sa.CheckConstraint('retention_period_days >= 0', name='check_retention_period_positive'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_retention_policies_active', 'data_retention_policies', ['is_active'], unique=False)
    op.create_index('idx_retention_policies_effective', 'data_retention_policies', ['effective_from', 'effective_until'], unique=False)
    op.create_index('idx_retention_policies_user_category', 'data_retention_policies', ['user_id', 'data_category'], unique=False)
    op.create_table('email_verification_tokens',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token_hash')
    )
    op.create_table('gdpr_requests',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('handled_by_user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('request_type', sa.String(length=30), nullable=False, comment='Type: access, portability, rectification, erasure, restriction, objection'),
    sa.Column('request_reference', sa.String(length=50), nullable=False, comment='Unique reference number for the request'),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Specific data categories requested'),
    sa.Column('date_range_start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('date_range_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: submitted, validated, processing, completed, rejected, cancelled'),
    sa.Column('priority', sa.String(length=20), nullable=False, comment='Priority: low, standard, high, urgent'),
    sa.Column('legal_basis_verification', sa.Boolean(), nullable=False),
    sa.Column('identity_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_method', sa.String(length=50), nullable=True),
    sa.Column('estimated_completion_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_completion_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_notes', sa.Text(), nullable=True),
    sa.Column('response_format', sa.String(length=20), nullable=False, comment='Response format: json, csv, pdf, email'),
    sa.Column('response_method', sa.String(length=20), nullable=False, comment='Delivery method: download, email, secure_portal'),
    sa.Column('response_delivered', sa.Boolean(), nullable=False),
    sa.Column('response_file_path', sa.String(length=500), nullable=True),
    sa.Column('contact_email', sa.String(length=255), nullable=False),
    sa.Column('communication_preference', sa.String(length=20), nullable=False, comment='Communication preference: email, phone, secure_message'),
    sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_processing_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("priority IN ('low', 'standard', 'high', 'urgent')", name='check_gdpr_priority'),
    sa.CheckConstraint("request_type IN ('access', 'portability', 'rectification', 'erasure', 'restriction', 'objection')", name='check_gdpr_request_type'),
    sa.CheckConstraint("response_format IN ('json', 'csv', 'pdf', 'xml', 'email')", name='check_response_format'),
    sa.CheckConstraint("response_method IN ('download', 'email', 'secure_portal', 'physical_mail')", name='check_response_method'),
    sa.CheckConstraint("status IN ('submitted', 'validated', 'processing', 'completed', 'rejected', 'cancelled')", name='check_gdpr_status'),
    sa.ForeignKeyConstraint(['handled_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_reference')
    )
    op.create_index('idx_gdpr_requests_org', 'gdpr_requests', ['organization_id'], unique=False)
    op.create_index('idx_gdpr_requests_reference', 'gdpr_requests', ['request_reference'], unique=False)
    op.create_index('idx_gdpr_requests_status', 'gdpr_requests', ['status'], unique=False)
    op.create_index('idx_gdpr_requests_submitted', 'gdpr_requests', ['submitted_at'], unique=False)
    op.create_index('idx_gdpr_requests_type', 'gdpr_requests', ['request_type'], unique=False)
    op.create_index('idx_gdpr_requests_user', 'gdpr_requests', ['user_id'], unique=False)
    op.create_table('integrations',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('configured_by_user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('service_type', sa.String(length=50), nullable=False, comment='Service type: slack, teams, gmail, google_drive, github, jira, etc.'),
    sa.Column('service_name', sa.String(length=100), nullable=False, comment='Human-readable service name'),
    sa.Column('integration_key', sa.String(length=255), nullable=False, comment='Unique key for this integration instance'),
    sa.Column('config', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Service-specific configuration parameters'),
    sa.Column('capabilities', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='List of capabilities: read_messages, send_messages, read_files, etc.'),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='OAuth scopes granted for this integration'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: active, inactive, error, pending_auth, expired'),
    sa.Column('health_status', sa.String(length=20), nullable=False, comment='Health: healthy, degraded, unhealthy, unknown'),
    sa.Column('last_health_check', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('rate_limit_per_hour', sa.Integer(), nullable=True),
    sa.Column('rate_limit_per_day', sa.Integer(), nullable=True),
    sa.Column('quota_used_today', sa.Integer(), nullable=False),
    sa.Column('quota_reset_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('integration_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional service-specific metadata'),
    sa.Column('webhook_url', sa.String(length=500), nullable=True),
    sa.Column('webhook_secret', sa.String(length=255), nullable=True),
    sa.Column('data_retention_days', sa.Integer(), nullable=True, comment='Days to retain data from this integration'),
    sa.Column('is_gdpr_compliant', sa.Boolean(), nullable=False),
    sa.Column('consent_required', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("health_status IN ('healthy', 'degraded', 'unhealthy', 'unknown')", name='check_health_status'),
    sa.CheckConstraint("service_type IN ('slack', 'teams', 'gmail', 'google_drive', 'google_calendar', 'github', 'jira', 'confluence', 'notion', 'sharepoint', 'onedrive', 'dropbox')", name='check_service_type'),
    sa.CheckConstraint("status IN ('active', 'inactive', 'error', 'pending_auth', 'expired')", name='check_integration_status'),
    sa.ForeignKeyConstraint(['configured_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'integration_key', name='uq_org_integration_key')
    )
    op.create_index('idx_integrations_health', 'integrations', ['health_status'], unique=False)
    op.create_index('idx_integrations_last_sync', 'integrations', ['last_sync_at'], unique=False)
    op.create_index('idx_integrations_org_service', 'integrations', ['organization_id', 'service_type'], unique=False)
    op.create_index('idx_integrations_status', 'integrations', ['status'], unique=False)
    op.create_table('password_reset_tokens',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_used', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token_hash')
    )
    op.create_table('privacy_consents',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('consent_type', sa.String(length=50), nullable=False, comment='Type: memory_storage, preference_learning, team_sharing, analytics, data_export'),
    sa.Column('consent_scope', sa.String(length=100), nullable=False, comment='Scope of consent: personal_memory, team_memory, cross_team, external_sharing'),
    sa.Column('consent_status', sa.String(length=20), nullable=False, comment='Status: granted, withdrawn, expired, pending'),
    sa.Column('legal_basis', sa.String(length=50), nullable=False, comment='GDPR legal basis: consent, contract, legal_obligation, vital_interests, public_task, legitimate_interests'),
    sa.Column('processing_purpose', sa.String(length=200), nullable=False, comment='Purpose of data processing'),
    sa.Column('consent_version', sa.String(length=20), nullable=False, comment='Version of consent terms'),
    sa.Column('consent_method', sa.String(length=50), nullable=False, comment='How consent was obtained: explicit, implicit, inherited, imported'),
    sa.Column('consent_evidence', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Evidence of consent including timestamps, IP, user agent'),
    sa.Column('granted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True, comment='When consent expires (if applicable)'),
    sa.Column('withdrawn_at', sa.DateTime(timezone=True), nullable=True, comment='When consent was withdrawn'),
    sa.Column('last_confirmed_at', sa.DateTime(timezone=True), nullable=True, comment='Last time user confirmed consent'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("consent_method IN ('explicit', 'implicit', 'inherited', 'imported')", name='check_consent_method'),
    sa.CheckConstraint("consent_status IN ('granted', 'withdrawn', 'expired', 'pending')", name='check_consent_status'),
    sa.CheckConstraint("consent_type IN ('memory_storage', 'preference_learning', 'team_sharing', 'analytics', 'data_export')", name='check_consent_type'),
    sa.CheckConstraint("legal_basis IN ('consent', 'contract', 'legal_obligation', 'vital_interests', 'public_task', 'legitimate_interests')", name='check_legal_basis'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'consent_type', 'consent_scope', name='uq_user_consent')
    )
    op.create_index('idx_privacy_consents_expires', 'privacy_consents', ['expires_at'], unique=False)
    op.create_index('idx_privacy_consents_scope', 'privacy_consents', ['consent_scope'], unique=False)
    op.create_index('idx_privacy_consents_status', 'privacy_consents', ['consent_status'], unique=False)
    op.create_index('idx_privacy_consents_user_type', 'privacy_consents', ['user_id', 'consent_type'], unique=False)
    op.create_table('privacy_settings',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('privacy_level', sa.String(length=20), nullable=False, comment='Overall privacy level: minimal, standard, enhanced, maximum'),
    sa.Column('data_sharing_level', sa.String(length=20), nullable=False, comment='Data sharing level: private, team, organization, none'),
    sa.Column('memory_retention', sa.Boolean(), nullable=False),
    sa.Column('memory_sharing_with_team', sa.Boolean(), nullable=False),
    sa.Column('conversation_retention_days', sa.Integer(), nullable=True, comment='Days to retain conversations, null for indefinite'),
    sa.Column('ai_training_consent', sa.Boolean(), nullable=False),
    sa.Column('analytics_consent', sa.Boolean(), nullable=False),
    sa.Column('personalization_consent', sa.Boolean(), nullable=False),
    sa.Column('external_integration_consent', sa.Boolean(), nullable=False),
    sa.Column('third_party_sharing_consent', sa.Boolean(), nullable=False),
    sa.Column('cross_border_transfer_consent', sa.Boolean(), nullable=False),
    sa.Column('privacy_notifications', sa.Boolean(), nullable=False),
    sa.Column('data_access_notifications', sa.Boolean(), nullable=False),
    sa.Column('consent_expiry_notifications', sa.Boolean(), nullable=False),
    sa.Column('auto_data_export', sa.Boolean(), nullable=False),
    sa.Column('data_export_format', sa.String(length=20), nullable=False, comment='Preferred export format: json, csv, pdf'),
    sa.Column('custom_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom privacy settings and preferences'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("data_export_format IN ('json', 'csv', 'pdf', 'xml')", name='check_data_export_format'),
    sa.CheckConstraint("data_sharing_level IN ('private', 'team', 'organization', 'none')", name='check_data_sharing_level'),
    sa.CheckConstraint("privacy_level IN ('minimal', 'standard', 'enhanced', 'maximum')", name='check_privacy_level'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'organization_id', name='uq_user_org_privacy_settings')
    )
    op.create_index('idx_privacy_settings_level', 'privacy_settings', ['privacy_level'], unique=False)
    op.create_index('idx_privacy_settings_org', 'privacy_settings', ['organization_id'], unique=False)
    op.create_index('idx_privacy_settings_user', 'privacy_settings', ['user_id'], unique=False)
    op.create_table('security_events',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False, comment='Type: authentication, authorization, data_access, system, network'),
    sa.Column('event_category', sa.String(length=50), nullable=False, comment='Category: failed_login, privilege_escalation, data_breach, etc.'),
    sa.Column('severity', sa.String(length=20), nullable=False, comment='Severity: info, low, medium, high, critical'),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('source_system', sa.String(length=50), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('threat_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Threat indicators and IOCs'),
    sa.Column('risk_score', sa.Float(), nullable=False, comment='Risk score 0.0-10.0'),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Confidence in threat assessment 0.0-1.0'),
    sa.Column('response_status', sa.String(length=20), nullable=False, comment='Status: open, investigating, mitigated, resolved, false_positive'),
    sa.Column('response_actions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Actions taken in response to the event'),
    sa.Column('assigned_to', sa.String(length=255), nullable=True),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional event metadata and context'),
    sa.Column('occurred_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('detected_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("event_type IN ('authentication', 'authorization', 'data_access', 'system', 'network', 'application')", name='check_security_event_type'),
    sa.CheckConstraint("response_status IN ('open', 'investigating', 'mitigated', 'resolved', 'false_positive')", name='check_response_status'),
    sa.CheckConstraint("severity IN ('info', 'low', 'medium', 'high', 'critical')", name='check_security_severity'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_security_confidence_range'),
    sa.CheckConstraint('risk_score >= 0.0 AND risk_score <= 10.0', name='check_risk_score_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_security_events_category', 'security_events', ['event_category'], unique=False)
    op.create_index('idx_security_events_occurred', 'security_events', ['occurred_at'], unique=False)
    op.create_index('idx_security_events_org', 'security_events', ['organization_id'], unique=False)
    op.create_index('idx_security_events_risk', 'security_events', ['risk_score'], unique=False)
    op.create_index('idx_security_events_severity', 'security_events', ['severity'], unique=False)
    op.create_index('idx_security_events_status', 'security_events', ['response_status'], unique=False)
    op.create_index('idx_security_events_type', 'security_events', ['event_type'], unique=False)
    op.create_index('idx_security_events_user', 'security_events', ['user_id'], unique=False)
    op.create_table('team_memories',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('team_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('memory_type', sa.String(length=50), nullable=False, comment='Type: team_process, decision_pattern, collaboration_style, project_context'),
    sa.Column('category', sa.String(length=100), nullable=False, comment='Category for organizing team memories'),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('team_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional structured data and context'),
    sa.Column('importance_score', sa.Float(), nullable=False, comment='Importance score 0.0-1.0 for memory prioritization'),
    sa.Column('relevance_score', sa.Float(), nullable=False, comment='Current relevance score 0.0-1.0'),
    sa.Column('source', sa.String(length=100), nullable=False, comment='Source: team_discussion, decision, process_observation, external_input'),
    sa.Column('consensus_level', sa.Float(), nullable=False, comment='Team consensus on memory accuracy 0.0-1.0'),
    sa.Column('validated_by_members', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of user IDs who have validated this memory'),
    sa.Column('visibility', sa.String(length=20), nullable=False, comment='Visibility: team, organization, private'),
    sa.Column('access_level', sa.String(length=20), nullable=False, comment='Access level: read_only, read_write, admin_only'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("access_level IN ('read_only', 'read_write', 'admin_only')", name='check_team_memory_access_level'),
    sa.CheckConstraint("memory_type IN ('team_process', 'decision_pattern', 'collaboration_style', 'project_context')", name='check_team_memory_type'),
    sa.CheckConstraint("source IN ('team_discussion', 'decision', 'process_observation', 'external_input')", name='check_team_memory_source'),
    sa.CheckConstraint("visibility IN ('team', 'organization', 'private')", name='check_team_memory_visibility'),
    sa.CheckConstraint('consensus_level >= 0.0 AND consensus_level <= 1.0', name='check_consensus_level_range'),
    sa.CheckConstraint('importance_score >= 0.0 AND importance_score <= 1.0', name='check_team_importance_score_range'),
    sa.CheckConstraint('relevance_score >= 0.0 AND relevance_score <= 1.0', name='check_relevance_score_range'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_team_memories_active', 'team_memories', ['is_active'], unique=False)
    op.create_index('idx_team_memories_category', 'team_memories', ['category'], unique=False)
    op.create_index('idx_team_memories_importance', 'team_memories', ['importance_score'], unique=False)
    op.create_index('idx_team_memories_team_created', 'team_memories', ['team_id', 'created_at'], unique=False)
    op.create_index('idx_team_memories_type', 'team_memories', ['memory_type'], unique=False)
    op.create_table('user_behavior_patterns',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('pattern_type', sa.String(length=50), nullable=False, comment='Type: activity_timing, topic_engagement, response_interaction, query_frequency'),
    sa.Column('pattern_name', sa.String(length=100), nullable=False, comment='Descriptive name for the pattern'),
    sa.Column('pattern_data', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Pattern data including metrics, frequencies, and trends'),
    sa.Column('frequency_score', sa.Float(), nullable=False, comment='How frequently this pattern occurs 0.0-1.0'),
    sa.Column('consistency_score', sa.Float(), nullable=False, comment='How consistent this pattern is over time 0.0-1.0'),
    sa.Column('predictive_value', sa.Float(), nullable=False, comment='How predictive this pattern is for preferences 0.0-1.0'),
    sa.Column('observation_start', sa.DateTime(timezone=True), nullable=False, comment='Start of observation period'),
    sa.Column('observation_end', sa.DateTime(timezone=True), nullable=False, comment='End of observation period'),
    sa.Column('sample_size', sa.Integer(), nullable=False, comment='Number of data points used to identify pattern'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_validated', sa.Boolean(), nullable=False, comment='Whether pattern has been validated through user feedback'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("pattern_type IN ('activity_timing', 'topic_engagement', 'response_interaction', 'query_frequency')", name='check_pattern_type'),
    sa.CheckConstraint('consistency_score >= 0.0 AND consistency_score <= 1.0', name='check_consistency_score_range'),
    sa.CheckConstraint('frequency_score >= 0.0 AND frequency_score <= 1.0', name='check_frequency_score_range'),
    sa.CheckConstraint('observation_start <= observation_end', name='check_observation_period_order'),
    sa.CheckConstraint('predictive_value >= 0.0 AND predictive_value <= 1.0', name='check_predictive_value_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_behavior_patterns_active', 'user_behavior_patterns', ['is_active'], unique=False)
    op.create_index('idx_user_behavior_patterns_frequency', 'user_behavior_patterns', ['frequency_score'], unique=False)
    op.create_index('idx_user_behavior_patterns_predictive', 'user_behavior_patterns', ['predictive_value'], unique=False)
    op.create_index('idx_user_behavior_patterns_user_type', 'user_behavior_patterns', ['user_id', 'pattern_type'], unique=False)
    op.create_table('user_memories',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('memory_type', sa.String(length=50), nullable=False, comment='Type: preference, behavior_pattern, context, personal_info, work_style'),
    sa.Column('category', sa.String(length=100), nullable=False, comment='Category for organizing memories'),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('memory_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional structured data and context'),
    sa.Column('importance_score', sa.Float(), nullable=False, comment='Importance score 0.0-1.0 for memory prioritization'),
    sa.Column('confidence_level', sa.Float(), nullable=False, comment='Confidence in memory accuracy 0.0-1.0'),
    sa.Column('source', sa.String(length=100), nullable=False, comment='Source: conversation, explicit_input, inferred, external_integration'),
    sa.Column('is_private', sa.Boolean(), nullable=False, comment='Whether memory is private to user or can be shared'),
    sa.Column('sharing_level', sa.String(length=20), nullable=False, comment='Sharing level: private, team, organization'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('access_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("memory_type IN ('preference', 'behavior_pattern', 'context', 'personal_info', 'work_style')", name='check_user_memory_type'),
    sa.CheckConstraint("sharing_level IN ('private', 'team', 'organization')", name='check_sharing_level'),
    sa.CheckConstraint("source IN ('conversation', 'explicit_input', 'inferred', 'external_integration')", name='check_memory_source'),
    sa.CheckConstraint('confidence_level >= 0.0 AND confidence_level <= 1.0', name='check_confidence_level_range'),
    sa.CheckConstraint('importance_score >= 0.0 AND importance_score <= 1.0', name='check_importance_score_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_user_memories_active', 'user_memories', ['is_active'], unique=False)
    op.create_index('idx_user_memories_category', 'user_memories', ['category'], unique=False)
    op.create_index('idx_user_memories_importance', 'user_memories', ['importance_score'], unique=False)
    op.create_index('idx_user_memories_type', 'user_memories', ['memory_type'], unique=False)
    op.create_index('idx_user_memories_user_created', 'user_memories', ['user_id', 'created_at'], unique=False)
    op.create_table('user_preferences',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('preference_category', sa.String(length=50), nullable=False, comment='Category: communication_style, topic_interest, format_preference, timing, feedback'),
    sa.Column('preference_key', sa.String(length=100), nullable=False, comment='Specific preference identifier'),
    sa.Column('preference_value', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Preference value and related metadata'),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Confidence in preference accuracy 0.0-1.0'),
    sa.Column('learning_source', sa.String(length=50), nullable=False, comment='Source: explicit_feedback, behavioral_analysis, pattern_detection, manual_override'),
    sa.Column('evidence_count', sa.Integer(), nullable=False, comment='Number of evidence points supporting this preference'),
    sa.Column('last_evidence_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False, comment='When last evidence was collected'),
    sa.Column('adaptation_rate', sa.Float(), nullable=False, comment='Rate of preference adaptation 0.0-1.0'),
    sa.Column('stability_score', sa.Float(), nullable=False, comment='Stability of preference over time 0.0-1.0'),
    sa.Column('is_manually_set', sa.Boolean(), nullable=False, comment='Whether preference was manually set by user'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("learning_source IN ('explicit_feedback', 'behavioral_analysis', 'pattern_detection', 'manual_override')", name='check_learning_source'),
    sa.CheckConstraint("preference_category IN ('communication_style', 'topic_interest', 'format_preference', 'timing', 'feedback')", name='check_preference_category'),
    sa.CheckConstraint('adaptation_rate >= 0.0 AND adaptation_rate <= 1.0', name='check_adaptation_rate_range'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_preference_confidence_score_range'),
    sa.CheckConstraint('stability_score >= 0.0 AND stability_score <= 1.0', name='check_stability_score_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'preference_category', 'preference_key', name='uq_user_preference')
    )
    op.create_index('idx_user_preferences_confidence', 'user_preferences', ['confidence_score'], unique=False)
    op.create_index('idx_user_preferences_key', 'user_preferences', ['preference_key'], unique=False)
    op.create_index('idx_user_preferences_updated', 'user_preferences', ['updated_at'], unique=False)
    op.create_index('idx_user_preferences_user_category', 'user_preferences', ['user_id', 'preference_category'], unique=False)
    op.create_table('conversation_messages',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('message_type', sa.String(length=20), nullable=False, comment='Type: user_query, ai_response, system_message'),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('message_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional metadata like response time, confidence scores, etc.'),
    sa.Column('ai_model_used', sa.String(length=100), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('sources_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Sources and data used to generate response'),
    sa.Column('processing_time_ms', sa.Integer(), nullable=True),
    sa.Column('sequence_number', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("message_type IN ('user_query', 'ai_response', 'system_message')", name='check_message_type'),
    sa.CheckConstraint('confidence_score IS NULL OR (confidence_score >= 0.0 AND confidence_score <= 1.0)', name='check_confidence_score_range'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('conversation_id', 'sequence_number', name='uq_conversation_message_sequence')
    )
    op.create_index('idx_conversation_messages_conv_seq', 'conversation_messages', ['conversation_id', 'sequence_number'], unique=False)
    op.create_index('idx_conversation_messages_created', 'conversation_messages', ['created_at'], unique=False)
    op.create_table('data_access_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='User whose data was accessed'),
    sa.Column('accessed_by_user_id', sa.UUID(as_uuid=False), nullable=True, comment='User who accessed the data'),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('access_type', sa.String(length=50), nullable=False, comment='Type: read, export, search, analysis, ai_processing'),
    sa.Column('data_type', sa.String(length=50), nullable=False, comment='Type of data: memory, conversation, file, integration_data, profile'),
    sa.Column('data_source', sa.String(length=100), nullable=False, comment='Source system or table where data was accessed'),
    sa.Column('purpose', sa.String(length=100), nullable=False, comment='Purpose of data access'),
    sa.Column('legal_basis', sa.String(length=50), nullable=False, comment='Legal basis for data access'),
    sa.Column('consent_record_id', sa.UUID(as_uuid=False), nullable=True, comment='Related consent record if applicable'),
    sa.Column('query_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Details of the query or access pattern'),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Categories of data accessed'),
    sa.Column('record_count', sa.Integer(), nullable=True, comment='Number of records accessed'),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('access_granted', sa.Boolean(), nullable=False),
    sa.Column('denial_reason', sa.Text(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('data_minimization_applied', sa.Boolean(), nullable=False),
    sa.Column('anonymization_applied', sa.Boolean(), nullable=False),
    sa.Column('encryption_used', sa.Boolean(), nullable=False),
    sa.Column('accessed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("access_type IN ('read', 'export', 'search', 'analysis', 'ai_processing', 'backup', 'migration')", name='check_data_access_type'),
    sa.CheckConstraint("data_type IN ('memory', 'conversation', 'file', 'integration_data', 'profile', 'audit', 'system')", name='check_data_type'),
    sa.ForeignKeyConstraint(['accessed_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['consent_record_id'], ['consent_records.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_data_access_logs_accessed', 'data_access_logs', ['accessed_at'], unique=False)
    op.create_index('idx_data_access_logs_accessor', 'data_access_logs', ['accessed_by_user_id'], unique=False)
    op.create_index('idx_data_access_logs_data_type', 'data_access_logs', ['data_type'], unique=False)
    op.create_index('idx_data_access_logs_session', 'data_access_logs', ['session_id'], unique=False)
    op.create_index('idx_data_access_logs_type', 'data_access_logs', ['access_type'], unique=False)
    op.create_index('idx_data_access_logs_user_accessed', 'data_access_logs', ['user_id', 'accessed_at'], unique=False)
    op.create_table('data_sources',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('integration_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('source_type', sa.String(length=50), nullable=False, comment='Type: channel, folder, repository, calendar, etc.'),
    sa.Column('external_id', sa.String(length=255), nullable=False, comment='ID in the external system'),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('source_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Source-specific metadata and configuration'),
    sa.Column('parent_source_id', sa.UUID(as_uuid=False), nullable=True, comment='Parent source for hierarchical structures'),
    sa.Column('is_enabled', sa.Boolean(), nullable=False),
    sa.Column('sync_frequency', sa.String(length=20), nullable=False, comment='Sync frequency: realtime, hourly, daily, weekly, manual'),
    sa.Column('sync_direction', sa.String(length=20), nullable=False, comment='Sync direction: inbound, outbound, bidirectional'),
    sa.Column('last_sync_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('next_sync_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sync_status', sa.String(length=20), nullable=False, comment='Status: pending, syncing, completed, failed, paused'),
    sa.Column('sync_error', sa.Text(), nullable=True),
    sa.Column('total_items', sa.Integer(), nullable=False),
    sa.Column('synced_items', sa.Integer(), nullable=False),
    sa.Column('failed_items', sa.Integer(), nullable=False),
    sa.Column('last_item_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('content_filters', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Content filters applied during sync'),
    sa.Column('privacy_level', sa.String(length=20), nullable=False, comment='Privacy level: public, standard, sensitive, restricted'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("privacy_level IN ('public', 'standard', 'sensitive', 'restricted')", name='check_privacy_level'),
    sa.CheckConstraint("source_type IN ('channel', 'folder', 'repository', 'calendar', 'board', 'space', 'drive')", name='check_source_type'),
    sa.CheckConstraint("sync_direction IN ('inbound', 'outbound', 'bidirectional')", name='check_sync_direction'),
    sa.CheckConstraint("sync_frequency IN ('realtime', 'hourly', 'daily', 'weekly', 'manual')", name='check_sync_frequency'),
    sa.CheckConstraint("sync_status IN ('pending', 'syncing', 'completed', 'failed', 'paused')", name='check_sync_status'),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['parent_source_id'], ['data_sources.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('integration_id', 'external_id', name='uq_integration_external_source')
    )
    op.create_index('idx_data_sources_external_id', 'data_sources', ['external_id'], unique=False)
    op.create_index('idx_data_sources_integration', 'data_sources', ['integration_id'], unique=False)
    op.create_index('idx_data_sources_last_sync', 'data_sources', ['last_sync_at'], unique=False)
    op.create_index('idx_data_sources_next_sync', 'data_sources', ['next_sync_at'], unique=False)
    op.create_index('idx_data_sources_sync_status', 'data_sources', ['sync_status'], unique=False)
    op.create_index('idx_data_sources_type', 'data_sources', ['source_type'], unique=False)
    op.create_table('decisions',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('team_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('decision_type', sa.String(length=50), nullable=False, comment='Type: strategic, operational, personnel, technical, process'),
    sa.Column('priority_level', sa.String(length=20), nullable=False, comment='Priority: low, medium, high, critical'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, approved, implemented, cancelled, reviewed'),
    sa.Column('outcome', sa.Text(), nullable=True),
    sa.Column('impact_assessment', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Assessment of decision impact and results'),
    sa.Column('stakeholders', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='List of user IDs affected by this decision'),
    sa.Column('context_tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Tags for categorization and search'),
    sa.Column('decided_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('implementation_deadline', sa.DateTime(timezone=True), nullable=True),
    sa.Column('implemented_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('reviewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("decision_type IN ('strategic', 'operational', 'personnel', 'technical', 'process')", name='check_decision_type'),
    sa.CheckConstraint("priority_level IN ('low', 'medium', 'high', 'critical')", name='check_priority_level'),
    sa.CheckConstraint("status IN ('pending', 'approved', 'implemented', 'cancelled', 'reviewed')", name='check_decision_status'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['team_id'], ['teams.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_decisions_priority', 'decisions', ['priority_level'], unique=False)
    op.create_index('idx_decisions_status', 'decisions', ['status'], unique=False)
    op.create_index('idx_decisions_team_decided', 'decisions', ['team_id', 'decided_at'], unique=False)
    op.create_index('idx_decisions_type', 'decisions', ['decision_type'], unique=False)
    op.create_index('idx_decisions_user_decided', 'decisions', ['user_id', 'decided_at'], unique=False)
    op.create_table('integration_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('integration_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('log_level', sa.String(length=10), nullable=False, comment='Log level: DEBUG, INFO, WARN, ERROR, CRITICAL'),
    sa.Column('operation', sa.String(length=100), nullable=False, comment='Operation performed: sync, auth, webhook, api_call, etc.'),
    sa.Column('message', sa.Text(), nullable=False),
    sa.Column('operation_id', sa.String(length=255), nullable=True, comment='Unique ID for grouping related log entries'),
    sa.Column('duration_ms', sa.Integer(), nullable=True, comment='Operation duration in milliseconds'),
    sa.Column('status_code', sa.Integer(), nullable=True, comment='HTTP status code for API operations'),
    sa.Column('log_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional context and metadata'),
    sa.Column('error_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Error details and stack traces'),
    sa.Column('external_request_id', sa.String(length=255), nullable=True, comment='Request ID from external service'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("log_level IN ('DEBUG', 'INFO', 'WARN', 'ERROR', 'CRITICAL')", name='check_log_level'),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_integration_logs_created', 'integration_logs', ['created_at'], unique=False)
    op.create_index('idx_integration_logs_integration_created', 'integration_logs', ['integration_id', 'created_at'], unique=False)
    op.create_index('idx_integration_logs_level', 'integration_logs', ['log_level'], unique=False)
    op.create_index('idx_integration_logs_operation', 'integration_logs', ['operation'], unique=False)
    op.create_index('idx_integration_logs_operation_id', 'integration_logs', ['operation_id'], unique=False)
    op.create_table('integration_permissions',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('integration_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('granted_by_user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('permission_level', sa.String(length=20), nullable=False, comment='Permission level: read, write, admin, none'),
    sa.Column('capabilities', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Specific capabilities granted'),
    sa.Column('restrictions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Specific restrictions or limitations'),
    sa.Column('consent_given', sa.Boolean(), nullable=False),
    sa.Column('consent_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('privacy_level', sa.String(length=20), nullable=False, comment='Privacy level: minimal, standard, extended'),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("permission_level IN ('read', 'write', 'admin', 'none')", name='check_permission_level'),
    sa.CheckConstraint("privacy_level IN ('minimal', 'standard', 'extended')", name='check_integration_privacy_level'),
    sa.ForeignKeyConstraint(['granted_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('integration_id', 'user_id', name='uq_integration_user_permission')
    )
    op.create_index('idx_integration_permissions_active', 'integration_permissions', ['is_active'], unique=False)
    op.create_index('idx_integration_permissions_expires', 'integration_permissions', ['expires_at'], unique=False)
    op.create_index('idx_integration_permissions_integration', 'integration_permissions', ['integration_id'], unique=False)
    op.create_index('idx_integration_permissions_user', 'integration_permissions', ['user_id'], unique=False)
    op.create_table('memory_embeddings',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_memory_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('team_memory_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('embedding_model', sa.String(length=100), nullable=False, comment='Model used to generate embedding'),
    sa.Column('embedding_version', sa.String(length=20), nullable=False, comment='Version of the embedding model'),
    sa.Column('content_hash', sa.String(length=64), nullable=False, comment='Hash of content for change detection'),
    sa.Column('vector_id', sa.String(length=255), nullable=False, comment='Reference ID in vector database'),
    sa.Column('vector_database', sa.String(length=50), nullable=False, comment='Vector database used: weaviate, pinecone'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("vector_database IN ('weaviate', 'pinecone')", name='check_vector_database'),
    sa.CheckConstraint('(user_memory_id IS NOT NULL AND team_memory_id IS NULL) OR (user_memory_id IS NULL AND team_memory_id IS NOT NULL)', name='check_memory_embedding_reference'),
    sa.ForeignKeyConstraint(['team_memory_id'], ['team_memories.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_memory_id'], ['user_memories.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_memory_embeddings_model', 'memory_embeddings', ['embedding_model', 'embedding_version'], unique=False)
    op.create_index('idx_memory_embeddings_team_memory', 'memory_embeddings', ['team_memory_id'], unique=False)
    op.create_index('idx_memory_embeddings_user_memory', 'memory_embeddings', ['user_memory_id'], unique=False)
    op.create_index('idx_memory_embeddings_vector', 'memory_embeddings', ['vector_id'], unique=False)
    op.create_table('oauth_tokens',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('integration_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='User-specific token, null for organization-level tokens'),
    sa.Column('access_token_encrypted', sa.Text(), nullable=False),
    sa.Column('refresh_token_encrypted', sa.Text(), nullable=True),
    sa.Column('token_type', sa.String(length=20), nullable=False),
    sa.Column('scopes', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Granted OAuth scopes'),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('refresh_expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('external_user_id', sa.String(length=255), nullable=True, comment='User ID in the external service'),
    sa.Column('external_username', sa.String(length=255), nullable=True),
    sa.Column('external_email', sa.String(length=255), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: active, expired, revoked, invalid'),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('encryption_key_id', sa.String(length=100), nullable=False, comment='ID of encryption key used'),
    sa.Column('encryption_algorithm', sa.String(length=50), nullable=False, comment='Encryption algorithm used'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("status IN ('active', 'expired', 'revoked', 'invalid')", name='check_oauth_token_status'),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_oauth_tokens_expires', 'oauth_tokens', ['expires_at'], unique=False)
    op.create_index('idx_oauth_tokens_external_user', 'oauth_tokens', ['external_user_id'], unique=False)
    op.create_index('idx_oauth_tokens_integration', 'oauth_tokens', ['integration_id'], unique=False)
    op.create_index('idx_oauth_tokens_status', 'oauth_tokens', ['status'], unique=False)
    op.create_index('idx_oauth_tokens_user', 'oauth_tokens', ['user_id'], unique=False)
    op.create_table('queries',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('query_type', sa.String(length=50), nullable=False, comment='Type: ad_hoc, daily_brief, team_update, project_status, custom_brief'),
    sa.Column('priority', sa.String(length=20), nullable=False, comment='Priority: low, medium, high, urgent'),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_intent', sa.String(length=100), nullable=True, comment='Detected intent: information_request, status_update, decision_support, etc.'),
    sa.Column('query_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Context and parameters for the query'),
    sa.Column('scope', sa.String(length=20), nullable=False, comment='Scope: personal, team, organization, specific_sources'),
    sa.Column('time_range_start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('time_range_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Specific data sources to include'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, processing, completed, failed, cancelled'),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_duration_ms', sa.Integer(), nullable=True),
    sa.Column('response_count', sa.Integer(), nullable=False),
    sa.Column('sources_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Sources and integrations used to answer the query'),
    sa.Column('confidence_score', sa.Float(), nullable=True, comment='Overall confidence in the response 0.0-1.0'),
    sa.Column('user_rating', sa.Integer(), nullable=True, comment='User rating 1-5 stars'),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('feedback_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("priority IN ('low', 'medium', 'high', 'urgent')", name='check_query_priority'),
    sa.CheckConstraint("query_type IN ('ad_hoc', 'daily_brief', 'team_update', 'project_status', 'custom_brief', 'team_interrogation')", name='check_query_type'),
    sa.CheckConstraint("scope IN ('personal', 'team', 'organization', 'specific_sources')", name='check_query_scope'),
    sa.CheckConstraint("status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')", name='check_query_status'),
    sa.CheckConstraint('confidence_score IS NULL OR (confidence_score >= 0.0 AND confidence_score <= 1.0)', name='check_query_confidence_range'),
    sa.CheckConstraint('user_rating IS NULL OR (user_rating >= 1 AND user_rating <= 5)', name='check_user_rating_range'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_queries_org_created', 'queries', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_queries_priority', 'queries', ['priority'], unique=False)
    op.create_index('idx_queries_rating', 'queries', ['user_rating'], unique=False)
    op.create_index('idx_queries_status', 'queries', ['status'], unique=False)
    op.create_index('idx_queries_type', 'queries', ['query_type'], unique=False)
    op.create_index('idx_queries_user_created', 'queries', ['user_id', 'created_at'], unique=False)
    op.create_table('rate_limits',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('connector_installation_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('limit_type', sa.String(length=20), nullable=False, comment='Type: requests_per_minute, requests_per_hour, requests_per_day'),
    sa.Column('limit_value', sa.Integer(), nullable=False, comment='Maximum number of requests allowed'),
    sa.Column('burst_limit', sa.Integer(), nullable=True, comment='Burst limit for short periods'),
    sa.Column('window_seconds', sa.Integer(), nullable=False, comment='Time window in seconds'),
    sa.Column('current_usage', sa.Integer(), nullable=False),
    sa.Column('window_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_request_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_adaptive', sa.Boolean(), nullable=False, comment='Whether limit adapts based on usage patterns'),
    sa.Column('adaptive_factor', sa.Float(), nullable=True, comment='Factor for adaptive rate limit adjustments'),
    sa.Column('min_limit', sa.Integer(), nullable=True, comment='Minimum adaptive limit'),
    sa.Column('max_limit', sa.Integer(), nullable=True, comment='Maximum adaptive limit'),
    sa.Column('violations_count', sa.Integer(), nullable=False),
    sa.Column('last_violation_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('consecutive_violations', sa.Integer(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: normal, warning, critical, suspended'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("limit_type IN ('requests_per_minute', 'requests_per_hour', 'requests_per_day', 'bytes_per_second')", name='check_rate_limit_type'),
    sa.CheckConstraint("status IN ('normal', 'warning', 'critical', 'suspended')", name='check_rate_limit_status'),
    sa.CheckConstraint('limit_value > 0', name='check_positive_limit_value'),
    sa.CheckConstraint('window_seconds > 0', name='check_positive_window_seconds'),
    sa.ForeignKeyConstraint(['connector_installation_id'], ['connector_installations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_rate_limits_active', 'rate_limits', ['is_active'], unique=False)
    op.create_index('idx_rate_limits_installation', 'rate_limits', ['connector_installation_id'], unique=False)
    op.create_index('idx_rate_limits_type', 'rate_limits', ['limit_type'], unique=False)
    op.create_index('idx_rate_limits_window_start', 'rate_limits', ['window_start'], unique=False)
    op.create_table('ai_responses',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('query_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('response_type', sa.String(length=50), nullable=False, comment='Type: initial_response, refinement, follow_up, error_recovery'),
    sa.Column('attempt_number', sa.Integer(), nullable=False, comment='Attempt number for this response'),
    sa.Column('ai_model', sa.String(length=100), nullable=False),
    sa.Column('ai_provider', sa.String(length=50), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('response_text', sa.Text(), nullable=False),
    sa.Column('response_format', sa.String(length=20), nullable=False, comment='Format: text, json, markdown, structured'),
    sa.Column('prompt_tokens', sa.Integer(), nullable=False),
    sa.Column('completion_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('processing_time_ms', sa.Integer(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Model confidence in response 0.0-1.0'),
    sa.Column('relevance_score', sa.Float(), nullable=True, comment='Relevance to query 0.0-1.0'),
    sa.Column('coherence_score', sa.Float(), nullable=True, comment='Response coherence 0.0-1.0'),
    sa.Column('completeness_score', sa.Float(), nullable=True, comment='Response completeness 0.0-1.0'),
    sa.Column('context_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Context and sources used for generation'),
    sa.Column('retrieval_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='RAG retrieval results and scores'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: completed, failed, timeout, cancelled'),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_type', sa.String(length=50), nullable=True),
    sa.Column('is_selected', sa.Boolean(), nullable=False, comment='Whether this response was selected for the final brief'),
    sa.Column('selection_reason', sa.Text(), nullable=True),
    sa.Column('estimated_cost', sa.Float(), nullable=True, comment='Estimated cost for this response'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("response_format IN ('text', 'json', 'markdown', 'structured')", name='check_response_format'),
    sa.CheckConstraint("response_type IN ('initial_response', 'refinement', 'follow_up', 'error_recovery')", name='check_response_type'),
    sa.CheckConstraint("status IN ('completed', 'failed', 'timeout', 'cancelled')", name='check_ai_response_status'),
    sa.CheckConstraint('coherence_score IS NULL OR (coherence_score >= 0.0 AND coherence_score <= 1.0)', name='check_coherence_score_range'),
    sa.CheckConstraint('completeness_score IS NULL OR (completeness_score >= 0.0 AND completeness_score <= 1.0)', name='check_completeness_score_range'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_ai_confidence_range'),
    sa.CheckConstraint('relevance_score IS NULL OR (relevance_score >= 0.0 AND relevance_score <= 1.0)', name='check_relevance_score_range'),
    sa.CheckConstraint('temperature IS NULL OR (temperature >= 0.0 AND temperature <= 2.0)', name='check_temperature_range'),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ai_responses_attempt', 'ai_responses', ['attempt_number'], unique=False)
    op.create_index('idx_ai_responses_confidence', 'ai_responses', ['confidence_score'], unique=False)
    op.create_index('idx_ai_responses_model', 'ai_responses', ['ai_model'], unique=False)
    op.create_index('idx_ai_responses_query_created', 'ai_responses', ['query_id', 'created_at'], unique=False)
    op.create_index('idx_ai_responses_selected', 'ai_responses', ['is_selected'], unique=False)
    op.create_index('idx_ai_responses_status', 'ai_responses', ['status'], unique=False)
    op.create_table('briefs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('query_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('brief_type', sa.String(length=50), nullable=False, comment='Type: daily_brief, weekly_summary, project_update, ad_hoc_report'),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('template_id', sa.String(length=100), nullable=True, comment='Template used to generate this brief'),
    sa.Column('executive_summary', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_format', sa.String(length=20), nullable=False, comment='Format: markdown, html, plain_text, json'),
    sa.Column('sections', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Structured sections of the brief'),
    sa.Column('key_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Key insights and takeaways'),
    sa.Column('action_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Recommended actions and next steps'),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('reading_time_minutes', sa.Integer(), nullable=False),
    sa.Column('complexity_score', sa.Float(), nullable=False, comment='Content complexity score 0.0-1.0'),
    sa.Column('source_count', sa.Integer(), nullable=False),
    sa.Column('sources', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Sources used to generate the brief'),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Overall confidence in the brief 0.0-1.0'),
    sa.Column('trust_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Trust and verification indicators'),
    sa.Column('ai_model_used', sa.String(length=100), nullable=False),
    sa.Column('generation_method', sa.String(length=50), nullable=False, comment='Method: rag, synthesis, template, hybrid'),
    sa.Column('generation_time_ms', sa.Integer(), nullable=False),
    sa.Column('token_usage', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Token usage statistics'),
    sa.Column('delivery_status', sa.String(length=20), nullable=False, comment='Status: pending, delivered, failed, cancelled'),
    sa.Column('delivery_channels', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Channels used for delivery: web, email, slack, teams'),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('viewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('time_spent_reading_seconds', sa.Integer(), nullable=True),
    sa.Column('user_rating', sa.Integer(), nullable=True, comment='User rating 1-5 stars'),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('feedback_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("brief_type IN ('daily_brief', 'weekly_summary', 'project_update', 'ad_hoc_report', 'team_update')", name='check_brief_type'),
    sa.CheckConstraint("content_format IN ('markdown', 'html', 'plain_text', 'json')", name='check_content_format'),
    sa.CheckConstraint("delivery_status IN ('pending', 'delivered', 'failed', 'cancelled')", name='check_delivery_status'),
    sa.CheckConstraint("generation_method IN ('rag', 'synthesis', 'template', 'hybrid')", name='check_generation_method'),
    sa.CheckConstraint('complexity_score >= 0.0 AND complexity_score <= 1.0', name='check_complexity_score_range'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_brief_confidence_range'),
    sa.CheckConstraint('user_rating IS NULL OR (user_rating >= 1 AND user_rating <= 5)', name='check_brief_rating_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_briefs_confidence', 'briefs', ['confidence_score'], unique=False)
    op.create_index('idx_briefs_delivery_status', 'briefs', ['delivery_status'], unique=False)
    op.create_index('idx_briefs_org_created', 'briefs', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_briefs_rating', 'briefs', ['user_rating'], unique=False)
    op.create_index('idx_briefs_type', 'briefs', ['brief_type'], unique=False)
    op.create_index('idx_briefs_user_created', 'briefs', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_briefs_viewed', 'briefs', ['viewed_at'], unique=False)
    op.create_table('sync_status',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('data_source_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('sync_id', sa.String(length=255), nullable=False, comment='Unique identifier for this sync run'),
    sa.Column('sync_type', sa.String(length=20), nullable=False, comment='Type: full, incremental, manual'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: running, completed, failed, cancelled'),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('items_processed', sa.Integer(), nullable=False),
    sa.Column('items_added', sa.Integer(), nullable=False),
    sa.Column('items_updated', sa.Integer(), nullable=False),
    sa.Column('items_deleted', sa.Integer(), nullable=False),
    sa.Column('items_failed', sa.Integer(), nullable=False),
    sa.Column('api_calls_made', sa.Integer(), nullable=False),
    sa.Column('rate_limit_hits', sa.Integer(), nullable=False),
    sa.Column('avg_response_time_ms', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=False),
    sa.Column('warnings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Non-fatal warnings during sync'),
    sa.Column('last_checkpoint', sa.String(length=255), nullable=True, comment='Last successful checkpoint for resumable syncs'),
    sa.Column('checkpoint_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Data needed to resume sync from checkpoint'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("status IN ('running', 'completed', 'failed', 'cancelled')", name='check_sync_status'),
    sa.CheckConstraint("sync_type IN ('full', 'incremental', 'manual')", name='check_sync_type'),
    sa.ForeignKeyConstraint(['data_source_id'], ['data_sources.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_sync_status_data_source_started', 'sync_status', ['data_source_id', 'started_at'], unique=False)
    op.create_index('idx_sync_status_started', 'sync_status', ['started_at'], unique=False)
    op.create_index('idx_sync_status_status', 'sync_status', ['status'], unique=False)
    op.create_index('idx_sync_status_sync_id', 'sync_status', ['sync_id'], unique=False)
    op.create_table('brief_delivery_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('brief_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('delivery_channel', sa.String(length=50), nullable=False, comment='Channel: web, email, slack, teams, webhook, api'),
    sa.Column('delivery_method', sa.String(length=50), nullable=False, comment='Method: push, pull, notification, direct_message'),
    sa.Column('recipient_type', sa.String(length=20), nullable=False, comment='Type: user, team, webhook, external_system'),
    sa.Column('recipient_id', sa.String(length=255), nullable=False, comment='ID of recipient (user_id, email, webhook_url, etc.)'),
    sa.Column('recipient_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional recipient metadata'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, sent, delivered, failed, bounced, rejected'),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=False, comment='Content type: full, summary, notification, link_only'),
    sa.Column('content_size_bytes', sa.Integer(), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivery_duration_ms', sa.Integer(), nullable=True),
    sa.Column('external_message_id', sa.String(length=255), nullable=True),
    sa.Column('external_tracking_id', sa.String(length=255), nullable=True),
    sa.Column('external_status', sa.String(length=50), nullable=True),
    sa.Column('opened_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('clicked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('engagement_score', sa.Float(), nullable=True, comment='Engagement score 0.0-1.0'),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('retry_after', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivery_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Channel-specific delivery metadata'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("content_type IN ('full', 'summary', 'notification', 'link_only')", name='check_content_type'),
    sa.CheckConstraint("delivery_channel IN ('web', 'email', 'slack', 'teams', 'webhook', 'api', 'sms')", name='check_delivery_channel'),
    sa.CheckConstraint("delivery_method IN ('push', 'pull', 'notification', 'direct_message', 'broadcast')", name='check_delivery_method'),
    sa.CheckConstraint("recipient_type IN ('user', 'team', 'webhook', 'external_system')", name='check_recipient_type'),
    sa.CheckConstraint("status IN ('pending', 'sent', 'delivered', 'failed', 'bounced', 'rejected')", name='check_delivery_status'),
    sa.CheckConstraint('engagement_score IS NULL OR (engagement_score >= 0.0 AND engagement_score <= 1.0)', name='check_engagement_score_range'),
    sa.ForeignKeyConstraint(['brief_id'], ['briefs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_brief_delivery_logs_brief', 'brief_delivery_logs', ['brief_id'], unique=False)
    op.create_index('idx_brief_delivery_logs_channel', 'brief_delivery_logs', ['delivery_channel'], unique=False)
    op.create_index('idx_brief_delivery_logs_delivered', 'brief_delivery_logs', ['delivered_at'], unique=False)
    op.create_index('idx_brief_delivery_logs_recipient', 'brief_delivery_logs', ['recipient_id'], unique=False)
    op.create_index('idx_brief_delivery_logs_scheduled', 'brief_delivery_logs', ['scheduled_at'], unique=False)
    op.create_index('idx_brief_delivery_logs_status', 'brief_delivery_logs', ['status'], unique=False)
    op.alter_column('api_keys', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment='Human-readable name for the API key',
               existing_nullable=False)
    op.alter_column('api_keys', 'key_hash',
               existing_type=sa.VARCHAR(length=255),
               comment='Bcrypt hash of the actual API key',
               existing_nullable=False)
    op.alter_column('api_keys', 'key_prefix',
               existing_type=sa.VARCHAR(length=8),
               comment='First 8 characters of key for identification',
               existing_nullable=False)
    op.alter_column('api_keys', 'permissions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False,
               comment='List of permissions granted to this API key')
    op.alter_column('api_keys', 'allowed_ips',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='IP addresses/CIDR blocks allowed to use this key',
               existing_nullable=True)
    op.alter_column('api_keys', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When API key expires (null = never)',
               existing_nullable=True)
    op.alter_column('api_keys', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='Last time this API key was used',
               existing_nullable=True)
    op.alter_column('api_keys', 'usage_count',
               existing_type=sa.INTEGER(),
               nullable=False,
               comment='Number of times this key has been used')
    op.alter_column('api_keys', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Whether this API key is currently active')
    op.alter_column('api_keys', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('api_keys', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('auth_user_sessions', 'refresh_token_hash',
               existing_type=sa.VARCHAR(length=255),
               comment='Bcrypt hash of refresh token',
               existing_nullable=False)
    op.alter_column('auth_user_sessions', 'device_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Device fingerprint and browser info',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'ip_address',
               existing_type=postgresql.INET(),
               comment='IP address when session was created',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'user_agent',
               existing_type=sa.TEXT(),
               comment='Browser user agent string',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment='When refresh token expires',
               existing_nullable=False)
    op.alter_column('auth_user_sessions', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               comment='Last time this session was used')
    op.alter_column('auth_user_sessions', 'is_revoked',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Whether session has been manually revoked')
    op.alter_column('auth_user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('auth_user_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('login_attempts', 'email',
               existing_type=sa.VARCHAR(length=255),
               comment='Email attempted (may not exist in system)',
               existing_nullable=True)
    op.alter_column('login_attempts', 'ip_address',
               existing_type=postgresql.INET(),
               comment='IP address of the attempt',
               existing_nullable=False)
    op.alter_column('login_attempts', 'user_agent',
               existing_type=sa.TEXT(),
               comment='Browser user agent string',
               existing_nullable=True)
    op.alter_column('login_attempts', 'attempt_type',
               existing_type=sa.VARCHAR(length=50),
               comment='Type of attempt: email_password, oauth, api_key',
               existing_nullable=False)
    op.alter_column('login_attempts', 'failure_reason',
               existing_type=sa.VARCHAR(length=100),
               comment='Why the attempt failed: invalid_credentials, account_locked, etc.',
               existing_nullable=False)
    op.alter_column('login_attempts', 'was_successful',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               comment='Whether this attempt succeeded')
    op.alter_column('login_attempts', 'additional_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Additional context about the attempt',
               existing_nullable=True)
    op.alter_column('login_attempts', 'attempted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('oauth_providers', 'provider_type',
               existing_type=sa.VARCHAR(length=50),
               comment='OAuth provider type: google, microsoft, slack, github',
               existing_nullable=False)
    op.alter_column('oauth_providers', 'provider_name',
               existing_type=sa.VARCHAR(length=100),
               comment='Human-readable provider name for UI display',
               existing_nullable=False)
    op.alter_column('oauth_providers', 'client_secret_encrypted',
               existing_type=sa.TEXT(),
               comment='Encrypted OAuth client secret',
               existing_nullable=False)
    op.alter_column('oauth_providers', 'scopes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=False,
               comment='OAuth scopes to request')
    op.alter_column('oauth_providers', 'provider_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment='Provider-specific configuration (tenant_id, domain, etc.)',
               existing_nullable=True)
    op.alter_column('oauth_providers', 'is_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=False)
    op.alter_column('oauth_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.alter_column('oauth_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False)
    op.drop_column('users', 'email_verified')
    op.drop_column('users', 'mfa_secret')
    op.drop_column('users', 'mfa_enabled')
    op.drop_column('users', 'last_login_at')
    op.drop_column('users', 'privacy_settings')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('privacy_settings', sa.TEXT(), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('last_login_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('mfa_enabled', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('mfa_secret', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('users', sa.Column('email_verified', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True))
    op.alter_column('oauth_providers', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('oauth_providers', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('oauth_providers', 'is_enabled',
               existing_type=sa.BOOLEAN(),
               nullable=True)
    op.alter_column('oauth_providers', 'provider_config',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Provider-specific configuration (tenant_id, domain, etc.)',
               existing_nullable=True)
    op.alter_column('oauth_providers', 'scopes',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               comment=None,
               existing_comment='OAuth scopes to request')
    op.alter_column('oauth_providers', 'client_secret_encrypted',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Encrypted OAuth client secret',
               existing_nullable=False)
    op.alter_column('oauth_providers', 'provider_name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Human-readable provider name for UI display',
               existing_nullable=False)
    op.alter_column('oauth_providers', 'provider_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='OAuth provider type: google, microsoft, slack, github',
               existing_nullable=False)
    op.alter_column('login_attempts', 'attempted_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('login_attempts', 'additional_data',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Additional context about the attempt',
               existing_nullable=True)
    op.alter_column('login_attempts', 'was_successful',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='Whether this attempt succeeded')
    op.alter_column('login_attempts', 'failure_reason',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Why the attempt failed: invalid_credentials, account_locked, etc.',
               existing_nullable=False)
    op.alter_column('login_attempts', 'attempt_type',
               existing_type=sa.VARCHAR(length=50),
               comment=None,
               existing_comment='Type of attempt: email_password, oauth, api_key',
               existing_nullable=False)
    op.alter_column('login_attempts', 'user_agent',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Browser user agent string',
               existing_nullable=True)
    op.alter_column('login_attempts', 'ip_address',
               existing_type=postgresql.INET(),
               comment=None,
               existing_comment='IP address of the attempt',
               existing_nullable=False)
    op.alter_column('login_attempts', 'email',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Email attempted (may not exist in system)',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('auth_user_sessions', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('auth_user_sessions', 'is_revoked',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='Whether session has been manually revoked')
    op.alter_column('auth_user_sessions', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               comment=None,
               existing_comment='Last time this session was used')
    op.alter_column('auth_user_sessions', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='When refresh token expires',
               existing_nullable=False)
    op.alter_column('auth_user_sessions', 'user_agent',
               existing_type=sa.TEXT(),
               comment=None,
               existing_comment='Browser user agent string',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'ip_address',
               existing_type=postgresql.INET(),
               comment=None,
               existing_comment='IP address when session was created',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'device_info',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='Device fingerprint and browser info',
               existing_nullable=True)
    op.alter_column('auth_user_sessions', 'refresh_token_hash',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Bcrypt hash of refresh token',
               existing_nullable=False)
    op.alter_column('api_keys', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('api_keys', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True)
    op.alter_column('api_keys', 'is_active',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               comment=None,
               existing_comment='Whether this API key is currently active')
    op.alter_column('api_keys', 'usage_count',
               existing_type=sa.INTEGER(),
               nullable=True,
               comment=None,
               existing_comment='Number of times this key has been used')
    op.alter_column('api_keys', 'last_used_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='Last time this API key was used',
               existing_nullable=True)
    op.alter_column('api_keys', 'expires_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               comment=None,
               existing_comment='When API key expires (null = never)',
               existing_nullable=True)
    op.alter_column('api_keys', 'allowed_ips',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               comment=None,
               existing_comment='IP addresses/CIDR blocks allowed to use this key',
               existing_nullable=True)
    op.alter_column('api_keys', 'permissions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               nullable=True,
               comment=None,
               existing_comment='List of permissions granted to this API key')
    op.alter_column('api_keys', 'key_prefix',
               existing_type=sa.VARCHAR(length=8),
               comment=None,
               existing_comment='First 8 characters of key for identification',
               existing_nullable=False)
    op.alter_column('api_keys', 'key_hash',
               existing_type=sa.VARCHAR(length=255),
               comment=None,
               existing_comment='Bcrypt hash of the actual API key',
               existing_nullable=False)
    op.alter_column('api_keys', 'name',
               existing_type=sa.VARCHAR(length=100),
               comment=None,
               existing_comment='Human-readable name for the API key',
               existing_nullable=False)
    op.drop_index('idx_brief_delivery_logs_status', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_scheduled', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_recipient', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_delivered', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_channel', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_brief', table_name='brief_delivery_logs')
    op.drop_table('brief_delivery_logs')
    op.drop_index('idx_sync_status_sync_id', table_name='sync_status')
    op.drop_index('idx_sync_status_status', table_name='sync_status')
    op.drop_index('idx_sync_status_started', table_name='sync_status')
    op.drop_index('idx_sync_status_data_source_started', table_name='sync_status')
    op.drop_table('sync_status')
    op.drop_index('idx_briefs_viewed', table_name='briefs')
    op.drop_index('idx_briefs_user_created', table_name='briefs')
    op.drop_index('idx_briefs_type', table_name='briefs')
    op.drop_index('idx_briefs_rating', table_name='briefs')
    op.drop_index('idx_briefs_org_created', table_name='briefs')
    op.drop_index('idx_briefs_delivery_status', table_name='briefs')
    op.drop_index('idx_briefs_confidence', table_name='briefs')
    op.drop_table('briefs')
    op.drop_index('idx_ai_responses_status', table_name='ai_responses')
    op.drop_index('idx_ai_responses_selected', table_name='ai_responses')
    op.drop_index('idx_ai_responses_query_created', table_name='ai_responses')
    op.drop_index('idx_ai_responses_model', table_name='ai_responses')
    op.drop_index('idx_ai_responses_confidence', table_name='ai_responses')
    op.drop_index('idx_ai_responses_attempt', table_name='ai_responses')
    op.drop_table('ai_responses')
    op.drop_index('idx_rate_limits_window_start', table_name='rate_limits')
    op.drop_index('idx_rate_limits_type', table_name='rate_limits')
    op.drop_index('idx_rate_limits_installation', table_name='rate_limits')
    op.drop_index('idx_rate_limits_active', table_name='rate_limits')
    op.drop_table('rate_limits')
    op.drop_index('idx_queries_user_created', table_name='queries')
    op.drop_index('idx_queries_type', table_name='queries')
    op.drop_index('idx_queries_status', table_name='queries')
    op.drop_index('idx_queries_rating', table_name='queries')
    op.drop_index('idx_queries_priority', table_name='queries')
    op.drop_index('idx_queries_org_created', table_name='queries')
    op.drop_table('queries')
    op.drop_index('idx_oauth_tokens_user', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_status', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_integration', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_external_user', table_name='oauth_tokens')
    op.drop_index('idx_oauth_tokens_expires', table_name='oauth_tokens')
    op.drop_table('oauth_tokens')
    op.drop_index('idx_memory_embeddings_vector', table_name='memory_embeddings')
    op.drop_index('idx_memory_embeddings_user_memory', table_name='memory_embeddings')
    op.drop_index('idx_memory_embeddings_team_memory', table_name='memory_embeddings')
    op.drop_index('idx_memory_embeddings_model', table_name='memory_embeddings')
    op.drop_table('memory_embeddings')
    op.drop_index('idx_integration_permissions_user', table_name='integration_permissions')
    op.drop_index('idx_integration_permissions_integration', table_name='integration_permissions')
    op.drop_index('idx_integration_permissions_expires', table_name='integration_permissions')
    op.drop_index('idx_integration_permissions_active', table_name='integration_permissions')
    op.drop_table('integration_permissions')
    op.drop_index('idx_integration_logs_operation_id', table_name='integration_logs')
    op.drop_index('idx_integration_logs_operation', table_name='integration_logs')
    op.drop_index('idx_integration_logs_level', table_name='integration_logs')
    op.drop_index('idx_integration_logs_integration_created', table_name='integration_logs')
    op.drop_index('idx_integration_logs_created', table_name='integration_logs')
    op.drop_table('integration_logs')
    op.drop_index('idx_decisions_user_decided', table_name='decisions')
    op.drop_index('idx_decisions_type', table_name='decisions')
    op.drop_index('idx_decisions_team_decided', table_name='decisions')
    op.drop_index('idx_decisions_status', table_name='decisions')
    op.drop_index('idx_decisions_priority', table_name='decisions')
    op.drop_table('decisions')
    op.drop_index('idx_data_sources_type', table_name='data_sources')
    op.drop_index('idx_data_sources_sync_status', table_name='data_sources')
    op.drop_index('idx_data_sources_next_sync', table_name='data_sources')
    op.drop_index('idx_data_sources_last_sync', table_name='data_sources')
    op.drop_index('idx_data_sources_integration', table_name='data_sources')
    op.drop_index('idx_data_sources_external_id', table_name='data_sources')
    op.drop_table('data_sources')
    op.drop_index('idx_data_access_logs_user_accessed', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_type', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_session', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_data_type', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_accessor', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_accessed', table_name='data_access_logs')
    op.drop_table('data_access_logs')
    op.drop_index('idx_conversation_messages_created', table_name='conversation_messages')
    op.drop_index('idx_conversation_messages_conv_seq', table_name='conversation_messages')
    op.drop_table('conversation_messages')
    op.drop_index('idx_user_preferences_user_category', table_name='user_preferences')
    op.drop_index('idx_user_preferences_updated', table_name='user_preferences')
    op.drop_index('idx_user_preferences_key', table_name='user_preferences')
    op.drop_index('idx_user_preferences_confidence', table_name='user_preferences')
    op.drop_table('user_preferences')
    op.drop_index('idx_user_memories_user_created', table_name='user_memories')
    op.drop_index('idx_user_memories_type', table_name='user_memories')
    op.drop_index('idx_user_memories_importance', table_name='user_memories')
    op.drop_index('idx_user_memories_category', table_name='user_memories')
    op.drop_index('idx_user_memories_active', table_name='user_memories')
    op.drop_table('user_memories')
    op.drop_index('idx_user_behavior_patterns_user_type', table_name='user_behavior_patterns')
    op.drop_index('idx_user_behavior_patterns_predictive', table_name='user_behavior_patterns')
    op.drop_index('idx_user_behavior_patterns_frequency', table_name='user_behavior_patterns')
    op.drop_index('idx_user_behavior_patterns_active', table_name='user_behavior_patterns')
    op.drop_table('user_behavior_patterns')
    op.drop_index('idx_team_memories_type', table_name='team_memories')
    op.drop_index('idx_team_memories_team_created', table_name='team_memories')
    op.drop_index('idx_team_memories_importance', table_name='team_memories')
    op.drop_index('idx_team_memories_category', table_name='team_memories')
    op.drop_index('idx_team_memories_active', table_name='team_memories')
    op.drop_table('team_memories')
    op.drop_index('idx_security_events_user', table_name='security_events')
    op.drop_index('idx_security_events_type', table_name='security_events')
    op.drop_index('idx_security_events_status', table_name='security_events')
    op.drop_index('idx_security_events_severity', table_name='security_events')
    op.drop_index('idx_security_events_risk', table_name='security_events')
    op.drop_index('idx_security_events_org', table_name='security_events')
    op.drop_index('idx_security_events_occurred', table_name='security_events')
    op.drop_index('idx_security_events_category', table_name='security_events')
    op.drop_table('security_events')
    op.drop_index('idx_privacy_settings_user', table_name='privacy_settings')
    op.drop_index('idx_privacy_settings_org', table_name='privacy_settings')
    op.drop_index('idx_privacy_settings_level', table_name='privacy_settings')
    op.drop_table('privacy_settings')
    op.drop_index('idx_privacy_consents_user_type', table_name='privacy_consents')
    op.drop_index('idx_privacy_consents_status', table_name='privacy_consents')
    op.drop_index('idx_privacy_consents_scope', table_name='privacy_consents')
    op.drop_index('idx_privacy_consents_expires', table_name='privacy_consents')
    op.drop_table('privacy_consents')
    op.drop_table('password_reset_tokens')
    op.drop_index('idx_integrations_status', table_name='integrations')
    op.drop_index('idx_integrations_org_service', table_name='integrations')
    op.drop_index('idx_integrations_last_sync', table_name='integrations')
    op.drop_index('idx_integrations_health', table_name='integrations')
    op.drop_table('integrations')
    op.drop_index('idx_gdpr_requests_user', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_type', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_submitted', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_status', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_reference', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_org', table_name='gdpr_requests')
    op.drop_table('gdpr_requests')
    op.drop_table('email_verification_tokens')
    op.drop_index('idx_retention_policies_user_category', table_name='data_retention_policies')
    op.drop_index('idx_retention_policies_effective', table_name='data_retention_policies')
    op.drop_index('idx_retention_policies_active', table_name='data_retention_policies')
    op.drop_table('data_retention_policies')
    op.drop_index('idx_data_export_requests_user_status', table_name='data_export_requests')
    op.drop_index('idx_data_export_requests_requested', table_name='data_export_requests')
    op.drop_index('idx_data_export_requests_expires', table_name='data_export_requests')
    op.drop_table('data_export_requests')
    op.drop_index('idx_conversations_user_created', table_name='conversations')
    op.drop_index('idx_conversations_team_created', table_name='conversations')
    op.drop_index('idx_conversations_session', table_name='conversations')
    op.drop_index('idx_conversations_context_type', table_name='conversations')
    op.drop_table('conversations')
    op.drop_index('idx_consent_records_user_type', table_name='consent_records')
    op.drop_index('idx_consent_records_org_type', table_name='consent_records')
    op.drop_index('idx_consent_records_given', table_name='consent_records')
    op.drop_index('idx_consent_records_expires', table_name='consent_records')
    op.drop_index('idx_consent_records_created', table_name='consent_records')
    op.drop_table('consent_records')
    op.drop_index('idx_connector_installations_status', table_name='connector_installations')
    op.drop_index('idx_connector_installations_org', table_name='connector_installations')
    op.drop_index('idx_connector_installations_health', table_name='connector_installations')
    op.drop_index('idx_connector_installations_connector', table_name='connector_installations')
    op.drop_table('connector_installations')
    op.drop_index('idx_configuration_templates_visibility', table_name='configuration_templates')
    op.drop_index('idx_configuration_templates_use_case', table_name='configuration_templates')
    op.drop_index('idx_configuration_templates_status', table_name='configuration_templates')
    op.drop_index('idx_configuration_templates_connector', table_name='configuration_templates')
    op.drop_index('idx_configuration_templates_category', table_name='configuration_templates')
    op.drop_table('configuration_templates')
    op.drop_index('idx_brief_templates_type', table_name='brief_templates')
    op.drop_index('idx_brief_templates_rating', table_name='brief_templates')
    op.drop_index('idx_brief_templates_public', table_name='brief_templates')
    op.drop_index('idx_brief_templates_org', table_name='brief_templates')
    op.drop_index('idx_brief_templates_category', table_name='brief_templates')
    op.drop_index('idx_brief_templates_active', table_name='brief_templates')
    op.drop_table('brief_templates')
    op.drop_index('idx_audit_logs_user_created', table_name='audit_logs')
    op.drop_index('idx_audit_logs_severity', table_name='audit_logs')
    op.drop_index('idx_audit_logs_session', table_name='audit_logs')
    op.drop_index('idx_audit_logs_risk', table_name='audit_logs')
    op.drop_index('idx_audit_logs_resource', table_name='audit_logs')
    op.drop_index('idx_audit_logs_org_created', table_name='audit_logs')
    op.drop_index('idx_audit_logs_created', table_name='audit_logs')
    op.drop_index('idx_audit_logs_category', table_name='audit_logs')
    op.drop_index('idx_audit_logs_action_type', table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index('idx_connector_health_checks_type', table_name='connector_health_checks')
    op.drop_index('idx_connector_health_checks_status', table_name='connector_health_checks')
    op.drop_index('idx_connector_health_checks_org', table_name='connector_health_checks')
    op.drop_index('idx_connector_health_checks_connector_checked', table_name='connector_health_checks')
    op.drop_table('connector_health_checks')
    op.drop_index('idx_connectors_version', table_name='connectors')
    op.drop_index('idx_connectors_type', table_name='connectors')
    op.drop_index('idx_connectors_status', table_name='connectors')
    op.drop_table('connectors')
    # ### end Alembic commands ###
