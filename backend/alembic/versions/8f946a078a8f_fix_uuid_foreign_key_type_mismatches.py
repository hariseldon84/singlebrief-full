"""Fix UUID foreign key type mismatches

Revision ID: 8f946a078a8f
Revises: ff4764a08797
Create Date: 2025-08-09 17:59:52.219042

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8f946a078a8f'
down_revision: Union[str, Sequence[str], None] = 'ff4764a08797'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='User who performed the action, null for system actions'),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('action_type', sa.String(length=50), nullable=False, comment='Type of action: create, read, update, delete, login, logout, etc.'),
    sa.Column('resource_type', sa.String(length=50), nullable=False, comment='Type of resource: user, conversation, memory, integration, etc.'),
    sa.Column('resource_id', sa.String(length=255), nullable=True, comment='ID of the specific resource affected'),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False, comment='Category: authentication, data_access, privacy, security, system'),
    sa.Column('severity', sa.String(length=20), nullable=False, comment='Severity level: debug, info, warning, error, critical'),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('old_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Previous values for update operations'),
    sa.Column('new_values', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='New values for create/update operations'),
    sa.Column('audit_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional context and metadata'),
    sa.Column('risk_level', sa.String(length=20), nullable=False, comment='Risk level: low, medium, high, critical'),
    sa.Column('compliance_flags', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Compliance framework flags: gdpr, ccpa, hipaa, sox, etc.'),
    sa.Column('retention_period_days', sa.Integer(), nullable=False, comment='Days to retain this audit record'),
    sa.Column('success', sa.Boolean(), nullable=False),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("action_type IN ('create', 'read', 'update', 'delete', 'login', 'logout', 'access', 'export', 'import', 'sync', 'configure', 'grant', 'revoke')", name='check_action_type'),
    sa.CheckConstraint("category IN ('authentication', 'data_access', 'privacy', 'security', 'system', 'integration', 'memory', 'billing')", name='check_audit_category'),
    sa.CheckConstraint("risk_level IN ('low', 'medium', 'high', 'critical')", name='check_risk_level'),
    sa.CheckConstraint("severity IN ('debug', 'info', 'warning', 'error', 'critical')", name='check_audit_severity'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_audit_logs_action_type', 'audit_logs', ['action_type'], unique=False)
    op.create_index('idx_audit_logs_category', 'audit_logs', ['category'], unique=False)
    op.create_index('idx_audit_logs_created', 'audit_logs', ['created_at'], unique=False)
    op.create_index('idx_audit_logs_org_created', 'audit_logs', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_audit_logs_resource', 'audit_logs', ['resource_type', 'resource_id'], unique=False)
    op.create_index('idx_audit_logs_risk', 'audit_logs', ['risk_level'], unique=False)
    op.create_index('idx_audit_logs_session', 'audit_logs', ['session_id'], unique=False)
    op.create_index('idx_audit_logs_severity', 'audit_logs', ['severity'], unique=False)
    op.create_index('idx_audit_logs_user_created', 'audit_logs', ['user_id', 'created_at'], unique=False)
    op.create_table('brief_templates',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('created_by_user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('template_type', sa.String(length=50), nullable=False, comment='Type: daily_brief, weekly_summary, project_update, custom'),
    sa.Column('category', sa.String(length=50), nullable=False, comment='Category: executive, operational, technical, project'),
    sa.Column('template_schema', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Template structure and schema definition'),
    sa.Column('sections', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Template sections and their configuration'),
    sa.Column('generation_prompt', sa.Text(), nullable=False, comment='Prompt template for AI generation'),
    sa.Column('data_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Required data sources and types'),
    sa.Column('output_format', sa.String(length=20), nullable=False, comment='Output format: markdown, html, json'),
    sa.Column('default_scope', sa.String(length=20), nullable=False, comment='Default scope: personal, team, organization'),
    sa.Column('default_time_range_hours', sa.Integer(), nullable=False, comment='Default time range in hours'),
    sa.Column('priority_sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Priority data sources for this template'),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('average_rating', sa.Float(), nullable=True, comment='Average user rating 1.0-5.0'),
    sa.Column('rating_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.CheckConstraint("category IN ('executive', 'operational', 'technical', 'project', 'team')", name='check_template_category'),
    sa.CheckConstraint("default_scope IN ('personal', 'team', 'organization')", name='check_template_default_scope'),
    sa.CheckConstraint("output_format IN ('markdown', 'html', 'json', 'plain_text')", name='check_template_output_format'),
    sa.CheckConstraint("template_type IN ('daily_brief', 'weekly_summary', 'project_update', 'custom', 'team_update')", name='check_template_type'),
    sa.CheckConstraint('average_rating IS NULL OR (average_rating >= 1.0 AND average_rating <= 5.0)', name='check_template_rating_range'),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('organization_id', 'name', name='uq_org_template_name')
    )
    op.create_index('idx_brief_templates_active', 'brief_templates', ['is_active'], unique=False)
    op.create_index('idx_brief_templates_category', 'brief_templates', ['category'], unique=False)
    op.create_index('idx_brief_templates_org', 'brief_templates', ['organization_id'], unique=False)
    op.create_index('idx_brief_templates_public', 'brief_templates', ['is_public'], unique=False)
    op.create_index('idx_brief_templates_rating', 'brief_templates', ['average_rating'], unique=False)
    op.create_index('idx_brief_templates_type', 'brief_templates', ['template_type'], unique=False)
    op.create_table('consent_records',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('consent_type', sa.String(length=50), nullable=False, comment='Type: data_processing, memory_storage, team_sharing, integration_access'),
    sa.Column('purpose', sa.String(length=100), nullable=False, comment='Specific purpose for consent'),
    sa.Column('scope', sa.String(length=50), nullable=False, comment='Scope: user, team, organization, global'),
    sa.Column('consent_given', sa.Boolean(), nullable=False),
    sa.Column('consent_version', sa.String(length=20), nullable=False, comment='Version of privacy policy/terms when consent was given'),
    sa.Column('consent_method', sa.String(length=50), nullable=False, comment='Method: explicit_click, implicit_use, email_confirmation, admin_grant'),
    sa.Column('legal_basis', sa.String(length=50), nullable=False, comment='GDPR legal basis: consent, contract, legal_obligation, vital_interests, public_task, legitimate_interests'),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Categories of data covered by this consent'),
    sa.Column('processing_activities', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Specific processing activities covered'),
    sa.Column('third_parties', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Third parties data may be shared with'),
    sa.Column('geographic_scope', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Geographic regions where consent applies'),
    sa.Column('retention_period_days', sa.Integer(), nullable=True, comment='Data retention period in days'),
    sa.Column('can_be_withdrawn', sa.Boolean(), nullable=False),
    sa.Column('withdrawal_instructions', sa.Text(), nullable=True),
    sa.Column('withdrawn_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('withdrawal_reason', sa.Text(), nullable=True),
    sa.Column('given_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("consent_method IN ('explicit_click', 'implicit_use', 'email_confirmation', 'admin_grant', 'api_acceptance')", name='check_consent_method'),
    sa.CheckConstraint("consent_type IN ('data_processing', 'memory_storage', 'team_sharing', 'integration_access', 'analytics', 'marketing')", name='check_consent_type'),
    sa.CheckConstraint("legal_basis IN ('consent', 'contract', 'legal_obligation', 'vital_interests', 'public_task', 'legitimate_interests')", name='check_legal_basis'),
    sa.CheckConstraint("scope IN ('user', 'team', 'organization', 'global')", name='check_consent_scope'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'consent_type', 'purpose', name='uq_user_consent_purpose')
    )
    op.create_index('idx_consent_records_created', 'consent_records', ['created_at'], unique=False)
    op.create_index('idx_consent_records_expires', 'consent_records', ['expires_at'], unique=False)
    op.create_index('idx_consent_records_given', 'consent_records', ['consent_given'], unique=False)
    op.create_index('idx_consent_records_org_type', 'consent_records', ['organization_id', 'consent_type'], unique=False)
    op.create_index('idx_consent_records_user_type', 'consent_records', ['user_id', 'consent_type'], unique=False)
    op.create_table('gdpr_requests',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('handled_by_user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('request_type', sa.String(length=30), nullable=False, comment='Type: access, portability, rectification, erasure, restriction, objection'),
    sa.Column('request_reference', sa.String(length=50), nullable=False, comment='Unique reference number for the request'),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Specific data categories requested'),
    sa.Column('date_range_start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('date_range_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: submitted, validated, processing, completed, rejected, cancelled'),
    sa.Column('priority', sa.String(length=20), nullable=False, comment='Priority: low, standard, high, urgent'),
    sa.Column('legal_basis_verification', sa.Boolean(), nullable=False),
    sa.Column('identity_verified', sa.Boolean(), nullable=False),
    sa.Column('verification_method', sa.String(length=50), nullable=True),
    sa.Column('estimated_completion_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('actual_completion_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_notes', sa.Text(), nullable=True),
    sa.Column('response_format', sa.String(length=20), nullable=False, comment='Response format: json, csv, pdf, email'),
    sa.Column('response_method', sa.String(length=20), nullable=False, comment='Delivery method: download, email, secure_portal'),
    sa.Column('response_delivered', sa.Boolean(), nullable=False),
    sa.Column('response_file_path', sa.String(length=500), nullable=True),
    sa.Column('contact_email', sa.String(length=255), nullable=False),
    sa.Column('communication_preference', sa.String(length=20), nullable=False, comment='Communication preference: email, phone, secure_message'),
    sa.Column('submitted_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('acknowledged_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('started_processing_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("priority IN ('low', 'standard', 'high', 'urgent')", name='check_gdpr_priority'),
    sa.CheckConstraint("request_type IN ('access', 'portability', 'rectification', 'erasure', 'restriction', 'objection')", name='check_gdpr_request_type'),
    sa.CheckConstraint("response_format IN ('json', 'csv', 'pdf', 'xml', 'email')", name='check_response_format'),
    sa.CheckConstraint("response_method IN ('download', 'email', 'secure_portal', 'physical_mail')", name='check_response_method'),
    sa.CheckConstraint("status IN ('submitted', 'validated', 'processing', 'completed', 'rejected', 'cancelled')", name='check_gdpr_status'),
    sa.ForeignKeyConstraint(['handled_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('request_reference')
    )
    op.create_index('idx_gdpr_requests_org', 'gdpr_requests', ['organization_id'], unique=False)
    op.create_index('idx_gdpr_requests_reference', 'gdpr_requests', ['request_reference'], unique=False)
    op.create_index('idx_gdpr_requests_status', 'gdpr_requests', ['status'], unique=False)
    op.create_index('idx_gdpr_requests_submitted', 'gdpr_requests', ['submitted_at'], unique=False)
    op.create_index('idx_gdpr_requests_type', 'gdpr_requests', ['request_type'], unique=False)
    op.create_index('idx_gdpr_requests_user', 'gdpr_requests', ['user_id'], unique=False)
    op.create_table('privacy_settings',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('privacy_level', sa.String(length=20), nullable=False, comment='Overall privacy level: minimal, standard, enhanced, maximum'),
    sa.Column('data_sharing_level', sa.String(length=20), nullable=False, comment='Data sharing level: private, team, organization, none'),
    sa.Column('memory_retention', sa.Boolean(), nullable=False),
    sa.Column('memory_sharing_with_team', sa.Boolean(), nullable=False),
    sa.Column('conversation_retention_days', sa.Integer(), nullable=True, comment='Days to retain conversations, null for indefinite'),
    sa.Column('ai_training_consent', sa.Boolean(), nullable=False),
    sa.Column('analytics_consent', sa.Boolean(), nullable=False),
    sa.Column('personalization_consent', sa.Boolean(), nullable=False),
    sa.Column('external_integration_consent', sa.Boolean(), nullable=False),
    sa.Column('third_party_sharing_consent', sa.Boolean(), nullable=False),
    sa.Column('cross_border_transfer_consent', sa.Boolean(), nullable=False),
    sa.Column('privacy_notifications', sa.Boolean(), nullable=False),
    sa.Column('data_access_notifications', sa.Boolean(), nullable=False),
    sa.Column('consent_expiry_notifications', sa.Boolean(), nullable=False),
    sa.Column('auto_data_export', sa.Boolean(), nullable=False),
    sa.Column('data_export_format', sa.String(length=20), nullable=False, comment='Preferred export format: json, csv, pdf'),
    sa.Column('custom_settings', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Custom privacy settings and preferences'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("data_export_format IN ('json', 'csv', 'pdf', 'xml')", name='check_data_export_format'),
    sa.CheckConstraint("data_sharing_level IN ('private', 'team', 'organization', 'none')", name='check_data_sharing_level'),
    sa.CheckConstraint("privacy_level IN ('minimal', 'standard', 'enhanced', 'maximum')", name='check_privacy_level'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'organization_id', name='uq_user_org_privacy_settings')
    )
    op.create_index('idx_privacy_settings_level', 'privacy_settings', ['privacy_level'], unique=False)
    op.create_index('idx_privacy_settings_org', 'privacy_settings', ['organization_id'], unique=False)
    op.create_index('idx_privacy_settings_user', 'privacy_settings', ['user_id'], unique=False)
    op.create_table('security_events',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False, comment='Type: authentication, authorization, data_access, system, network'),
    sa.Column('event_category', sa.String(length=50), nullable=False, comment='Category: failed_login, privilege_escalation, data_breach, etc.'),
    sa.Column('severity', sa.String(length=20), nullable=False, comment='Severity: info, low, medium, high, critical'),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('source_system', sa.String(length=50), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('threat_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Threat indicators and IOCs'),
    sa.Column('risk_score', sa.Float(), nullable=False, comment='Risk score 0.0-10.0'),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Confidence in threat assessment 0.0-1.0'),
    sa.Column('response_status', sa.String(length=20), nullable=False, comment='Status: open, investigating, mitigated, resolved, false_positive'),
    sa.Column('response_actions', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Actions taken in response to the event'),
    sa.Column('assigned_to', sa.String(length=255), nullable=True),
    sa.Column('event_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional event metadata and context'),
    sa.Column('occurred_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('detected_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('resolved_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("event_type IN ('authentication', 'authorization', 'data_access', 'system', 'network', 'application')", name='check_security_event_type'),
    sa.CheckConstraint("response_status IN ('open', 'investigating', 'mitigated', 'resolved', 'false_positive')", name='check_response_status'),
    sa.CheckConstraint("severity IN ('info', 'low', 'medium', 'high', 'critical')", name='check_security_severity'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_security_confidence_range'),
    sa.CheckConstraint('risk_score >= 0.0 AND risk_score <= 10.0', name='check_risk_score_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_security_events_category', 'security_events', ['event_category'], unique=False)
    op.create_index('idx_security_events_occurred', 'security_events', ['occurred_at'], unique=False)
    op.create_index('idx_security_events_org', 'security_events', ['organization_id'], unique=False)
    op.create_index('idx_security_events_risk', 'security_events', ['risk_score'], unique=False)
    op.create_index('idx_security_events_severity', 'security_events', ['severity'], unique=False)
    op.create_index('idx_security_events_status', 'security_events', ['response_status'], unique=False)
    op.create_index('idx_security_events_type', 'security_events', ['event_type'], unique=False)
    op.create_index('idx_security_events_user', 'security_events', ['user_id'], unique=False)
    op.create_table('data_access_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=True, comment='User whose data was accessed'),
    sa.Column('accessed_by_user_id', sa.UUID(as_uuid=False), nullable=True, comment='User who accessed the data'),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('access_type', sa.String(length=50), nullable=False, comment='Type: read, export, search, analysis, ai_processing'),
    sa.Column('data_type', sa.String(length=50), nullable=False, comment='Type of data: memory, conversation, file, integration_data, profile'),
    sa.Column('data_source', sa.String(length=100), nullable=False, comment='Source system or table where data was accessed'),
    sa.Column('purpose', sa.String(length=100), nullable=False, comment='Purpose of data access'),
    sa.Column('legal_basis', sa.String(length=50), nullable=False, comment='Legal basis for data access'),
    sa.Column('consent_record_id', sa.UUID(as_uuid=False), nullable=True, comment='Related consent record if applicable'),
    sa.Column('query_details', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Details of the query or access pattern'),
    sa.Column('data_categories', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Categories of data accessed'),
    sa.Column('record_count', sa.Integer(), nullable=True, comment='Number of records accessed'),
    sa.Column('session_id', sa.String(length=255), nullable=True),
    sa.Column('request_id', sa.String(length=255), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('access_granted', sa.Boolean(), nullable=False),
    sa.Column('denial_reason', sa.Text(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('data_minimization_applied', sa.Boolean(), nullable=False),
    sa.Column('anonymization_applied', sa.Boolean(), nullable=False),
    sa.Column('encryption_used', sa.Boolean(), nullable=False),
    sa.Column('accessed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("access_type IN ('read', 'export', 'search', 'analysis', 'ai_processing', 'backup', 'migration')", name='check_data_access_type'),
    sa.CheckConstraint("data_type IN ('memory', 'conversation', 'file', 'integration_data', 'profile', 'audit', 'system')", name='check_data_type'),
    sa.ForeignKeyConstraint(['accessed_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['consent_record_id'], ['consent_records.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_data_access_logs_accessed', 'data_access_logs', ['accessed_at'], unique=False)
    op.create_index('idx_data_access_logs_accessor', 'data_access_logs', ['accessed_by_user_id'], unique=False)
    op.create_index('idx_data_access_logs_data_type', 'data_access_logs', ['data_type'], unique=False)
    op.create_index('idx_data_access_logs_session', 'data_access_logs', ['session_id'], unique=False)
    op.create_index('idx_data_access_logs_type', 'data_access_logs', ['access_type'], unique=False)
    op.create_index('idx_data_access_logs_user_accessed', 'data_access_logs', ['user_id', 'accessed_at'], unique=False)
    op.create_table('queries',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('conversation_id', sa.UUID(as_uuid=False), nullable=True),
    sa.Column('query_type', sa.String(length=50), nullable=False, comment='Type: ad_hoc, daily_brief, team_update, project_status, custom_brief'),
    sa.Column('priority', sa.String(length=20), nullable=False, comment='Priority: low, medium, high, urgent'),
    sa.Column('query_text', sa.Text(), nullable=False),
    sa.Column('query_intent', sa.String(length=100), nullable=True, comment='Detected intent: information_request, status_update, decision_support, etc.'),
    sa.Column('query_context', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Context and parameters for the query'),
    sa.Column('scope', sa.String(length=20), nullable=False, comment='Scope: personal, team, organization, specific_sources'),
    sa.Column('time_range_start', sa.DateTime(timezone=True), nullable=True),
    sa.Column('time_range_end', sa.DateTime(timezone=True), nullable=True),
    sa.Column('data_sources', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Specific data sources to include'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, processing, completed, failed, cancelled'),
    sa.Column('processing_started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_completed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('processing_duration_ms', sa.Integer(), nullable=True),
    sa.Column('response_count', sa.Integer(), nullable=False),
    sa.Column('sources_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Sources and integrations used to answer the query'),
    sa.Column('confidence_score', sa.Float(), nullable=True, comment='Overall confidence in the response 0.0-1.0'),
    sa.Column('user_rating', sa.Integer(), nullable=True, comment='User rating 1-5 stars'),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('feedback_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('retry_count', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("priority IN ('low', 'medium', 'high', 'urgent')", name='check_query_priority'),
    sa.CheckConstraint("query_type IN ('ad_hoc', 'daily_brief', 'team_update', 'project_status', 'custom_brief', 'team_interrogation')", name='check_query_type'),
    sa.CheckConstraint("scope IN ('personal', 'team', 'organization', 'specific_sources')", name='check_query_scope'),
    sa.CheckConstraint("status IN ('pending', 'processing', 'completed', 'failed', 'cancelled')", name='check_query_status'),
    sa.CheckConstraint('confidence_score IS NULL OR (confidence_score >= 0.0 AND confidence_score <= 1.0)', name='check_query_confidence_range'),
    sa.CheckConstraint('user_rating IS NULL OR (user_rating >= 1 AND user_rating <= 5)', name='check_user_rating_range'),
    sa.ForeignKeyConstraint(['conversation_id'], ['conversations.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_queries_org_created', 'queries', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_queries_priority', 'queries', ['priority'], unique=False)
    op.create_index('idx_queries_rating', 'queries', ['user_rating'], unique=False)
    op.create_index('idx_queries_status', 'queries', ['status'], unique=False)
    op.create_index('idx_queries_type', 'queries', ['query_type'], unique=False)
    op.create_index('idx_queries_user_created', 'queries', ['user_id', 'created_at'], unique=False)
    op.create_table('ai_responses',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('query_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('response_type', sa.String(length=50), nullable=False, comment='Type: initial_response, refinement, follow_up, error_recovery'),
    sa.Column('attempt_number', sa.Integer(), nullable=False, comment='Attempt number for this response'),
    sa.Column('ai_model', sa.String(length=100), nullable=False),
    sa.Column('ai_provider', sa.String(length=50), nullable=False),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('temperature', sa.Float(), nullable=True),
    sa.Column('max_tokens', sa.Integer(), nullable=True),
    sa.Column('response_text', sa.Text(), nullable=False),
    sa.Column('response_format', sa.String(length=20), nullable=False, comment='Format: text, json, markdown, structured'),
    sa.Column('prompt_tokens', sa.Integer(), nullable=False),
    sa.Column('completion_tokens', sa.Integer(), nullable=False),
    sa.Column('total_tokens', sa.Integer(), nullable=False),
    sa.Column('processing_time_ms', sa.Integer(), nullable=False),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Model confidence in response 0.0-1.0'),
    sa.Column('relevance_score', sa.Float(), nullable=True, comment='Relevance to query 0.0-1.0'),
    sa.Column('coherence_score', sa.Float(), nullable=True, comment='Response coherence 0.0-1.0'),
    sa.Column('completeness_score', sa.Float(), nullable=True, comment='Response completeness 0.0-1.0'),
    sa.Column('context_used', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Context and sources used for generation'),
    sa.Column('retrieval_results', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='RAG retrieval results and scores'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: completed, failed, timeout, cancelled'),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_type', sa.String(length=50), nullable=True),
    sa.Column('is_selected', sa.Boolean(), nullable=False, comment='Whether this response was selected for the final brief'),
    sa.Column('selection_reason', sa.Text(), nullable=True),
    sa.Column('estimated_cost', sa.Float(), nullable=True, comment='Estimated cost for this response'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("response_format IN ('text', 'json', 'markdown', 'structured')", name='check_response_format'),
    sa.CheckConstraint("response_type IN ('initial_response', 'refinement', 'follow_up', 'error_recovery')", name='check_response_type'),
    sa.CheckConstraint("status IN ('completed', 'failed', 'timeout', 'cancelled')", name='check_ai_response_status'),
    sa.CheckConstraint('coherence_score IS NULL OR (coherence_score >= 0.0 AND coherence_score <= 1.0)', name='check_coherence_score_range'),
    sa.CheckConstraint('completeness_score IS NULL OR (completeness_score >= 0.0 AND completeness_score <= 1.0)', name='check_completeness_score_range'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_ai_confidence_range'),
    sa.CheckConstraint('relevance_score IS NULL OR (relevance_score >= 0.0 AND relevance_score <= 1.0)', name='check_relevance_score_range'),
    sa.CheckConstraint('temperature IS NULL OR (temperature >= 0.0 AND temperature <= 2.0)', name='check_temperature_range'),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ai_responses_attempt', 'ai_responses', ['attempt_number'], unique=False)
    op.create_index('idx_ai_responses_confidence', 'ai_responses', ['confidence_score'], unique=False)
    op.create_index('idx_ai_responses_model', 'ai_responses', ['ai_model'], unique=False)
    op.create_index('idx_ai_responses_query_created', 'ai_responses', ['query_id', 'created_at'], unique=False)
    op.create_index('idx_ai_responses_selected', 'ai_responses', ['is_selected'], unique=False)
    op.create_index('idx_ai_responses_status', 'ai_responses', ['status'], unique=False)
    op.create_table('briefs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('query_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('user_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('organization_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('brief_type', sa.String(length=50), nullable=False, comment='Type: daily_brief, weekly_summary, project_update, ad_hoc_report'),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('template_id', sa.String(length=100), nullable=True, comment='Template used to generate this brief'),
    sa.Column('executive_summary', sa.Text(), nullable=False),
    sa.Column('content', sa.Text(), nullable=False),
    sa.Column('content_format', sa.String(length=20), nullable=False, comment='Format: markdown, html, plain_text, json'),
    sa.Column('sections', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Structured sections of the brief'),
    sa.Column('key_insights', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Key insights and takeaways'),
    sa.Column('action_items', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Recommended actions and next steps'),
    sa.Column('word_count', sa.Integer(), nullable=False),
    sa.Column('reading_time_minutes', sa.Integer(), nullable=False),
    sa.Column('complexity_score', sa.Float(), nullable=False, comment='Content complexity score 0.0-1.0'),
    sa.Column('source_count', sa.Integer(), nullable=False),
    sa.Column('sources', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Sources used to generate the brief'),
    sa.Column('confidence_score', sa.Float(), nullable=False, comment='Overall confidence in the brief 0.0-1.0'),
    sa.Column('trust_indicators', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Trust and verification indicators'),
    sa.Column('ai_model_used', sa.String(length=100), nullable=False),
    sa.Column('generation_method', sa.String(length=50), nullable=False, comment='Method: rag, synthesis, template, hybrid'),
    sa.Column('generation_time_ms', sa.Integer(), nullable=False),
    sa.Column('token_usage', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Token usage statistics'),
    sa.Column('delivery_status', sa.String(length=20), nullable=False, comment='Status: pending, delivered, failed, cancelled'),
    sa.Column('delivery_channels', postgresql.JSONB(astext_type=sa.Text()), nullable=False, comment='Channels used for delivery: web, email, slack, teams'),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('viewed_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('view_count', sa.Integer(), nullable=False),
    sa.Column('time_spent_reading_seconds', sa.Integer(), nullable=True),
    sa.Column('user_rating', sa.Integer(), nullable=True, comment='User rating 1-5 stars'),
    sa.Column('user_feedback', sa.Text(), nullable=True),
    sa.Column('feedback_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_archived', sa.Boolean(), nullable=False),
    sa.Column('archived_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("brief_type IN ('daily_brief', 'weekly_summary', 'project_update', 'ad_hoc_report', 'team_update')", name='check_brief_type'),
    sa.CheckConstraint("content_format IN ('markdown', 'html', 'plain_text', 'json')", name='check_content_format'),
    sa.CheckConstraint("delivery_status IN ('pending', 'delivered', 'failed', 'cancelled')", name='check_delivery_status'),
    sa.CheckConstraint("generation_method IN ('rag', 'synthesis', 'template', 'hybrid')", name='check_generation_method'),
    sa.CheckConstraint('complexity_score >= 0.0 AND complexity_score <= 1.0', name='check_complexity_score_range'),
    sa.CheckConstraint('confidence_score >= 0.0 AND confidence_score <= 1.0', name='check_brief_confidence_range'),
    sa.CheckConstraint('user_rating IS NULL OR (user_rating >= 1 AND user_rating <= 5)', name='check_brief_rating_range'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['query_id'], ['queries.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_briefs_confidence', 'briefs', ['confidence_score'], unique=False)
    op.create_index('idx_briefs_delivery_status', 'briefs', ['delivery_status'], unique=False)
    op.create_index('idx_briefs_org_created', 'briefs', ['organization_id', 'created_at'], unique=False)
    op.create_index('idx_briefs_rating', 'briefs', ['user_rating'], unique=False)
    op.create_index('idx_briefs_type', 'briefs', ['brief_type'], unique=False)
    op.create_index('idx_briefs_user_created', 'briefs', ['user_id', 'created_at'], unique=False)
    op.create_index('idx_briefs_viewed', 'briefs', ['viewed_at'], unique=False)
    op.create_table('brief_delivery_logs',
    sa.Column('id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('brief_id', sa.UUID(as_uuid=False), nullable=False),
    sa.Column('delivery_channel', sa.String(length=50), nullable=False, comment='Channel: web, email, slack, teams, webhook, api'),
    sa.Column('delivery_method', sa.String(length=50), nullable=False, comment='Method: push, pull, notification, direct_message'),
    sa.Column('recipient_type', sa.String(length=20), nullable=False, comment='Type: user, team, webhook, external_system'),
    sa.Column('recipient_id', sa.String(length=255), nullable=False, comment='ID of recipient (user_id, email, webhook_url, etc.)'),
    sa.Column('recipient_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Additional recipient metadata'),
    sa.Column('status', sa.String(length=20), nullable=False, comment='Status: pending, sent, delivered, failed, bounced, rejected'),
    sa.Column('attempt_number', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('content_type', sa.String(length=20), nullable=False, comment='Content type: full, summary, notification, link_only'),
    sa.Column('content_size_bytes', sa.Integer(), nullable=True),
    sa.Column('scheduled_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sent_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivered_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivery_duration_ms', sa.Integer(), nullable=True),
    sa.Column('external_message_id', sa.String(length=255), nullable=True),
    sa.Column('external_tracking_id', sa.String(length=255), nullable=True),
    sa.Column('external_status', sa.String(length=50), nullable=True),
    sa.Column('opened_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('clicked_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('engagement_score', sa.Float(), nullable=True, comment='Engagement score 0.0-1.0'),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_code', sa.String(length=50), nullable=True),
    sa.Column('retry_after', sa.DateTime(timezone=True), nullable=True),
    sa.Column('delivery_metadata', postgresql.JSONB(astext_type=sa.Text()), nullable=True, comment='Channel-specific delivery metadata'),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.CheckConstraint("content_type IN ('full', 'summary', 'notification', 'link_only')", name='check_content_type'),
    sa.CheckConstraint("delivery_channel IN ('web', 'email', 'slack', 'teams', 'webhook', 'api', 'sms')", name='check_delivery_channel'),
    sa.CheckConstraint("delivery_method IN ('push', 'pull', 'notification', 'direct_message', 'broadcast')", name='check_delivery_method'),
    sa.CheckConstraint("recipient_type IN ('user', 'team', 'webhook', 'external_system')", name='check_recipient_type'),
    sa.CheckConstraint("status IN ('pending', 'sent', 'delivered', 'failed', 'bounced', 'rejected')", name='check_delivery_status'),
    sa.CheckConstraint('engagement_score IS NULL OR (engagement_score >= 0.0 AND engagement_score <= 1.0)', name='check_engagement_score_range'),
    sa.ForeignKeyConstraint(['brief_id'], ['briefs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_brief_delivery_logs_brief', 'brief_delivery_logs', ['brief_id'], unique=False)
    op.create_index('idx_brief_delivery_logs_channel', 'brief_delivery_logs', ['delivery_channel'], unique=False)
    op.create_index('idx_brief_delivery_logs_delivered', 'brief_delivery_logs', ['delivered_at'], unique=False)
    op.create_index('idx_brief_delivery_logs_recipient', 'brief_delivery_logs', ['recipient_id'], unique=False)
    op.create_index('idx_brief_delivery_logs_scheduled', 'brief_delivery_logs', ['scheduled_at'], unique=False)
    op.create_index('idx_brief_delivery_logs_status', 'brief_delivery_logs', ['status'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_brief_delivery_logs_status', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_scheduled', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_recipient', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_delivered', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_channel', table_name='brief_delivery_logs')
    op.drop_index('idx_brief_delivery_logs_brief', table_name='brief_delivery_logs')
    op.drop_table('brief_delivery_logs')
    op.drop_index('idx_briefs_viewed', table_name='briefs')
    op.drop_index('idx_briefs_user_created', table_name='briefs')
    op.drop_index('idx_briefs_type', table_name='briefs')
    op.drop_index('idx_briefs_rating', table_name='briefs')
    op.drop_index('idx_briefs_org_created', table_name='briefs')
    op.drop_index('idx_briefs_delivery_status', table_name='briefs')
    op.drop_index('idx_briefs_confidence', table_name='briefs')
    op.drop_table('briefs')
    op.drop_index('idx_ai_responses_status', table_name='ai_responses')
    op.drop_index('idx_ai_responses_selected', table_name='ai_responses')
    op.drop_index('idx_ai_responses_query_created', table_name='ai_responses')
    op.drop_index('idx_ai_responses_model', table_name='ai_responses')
    op.drop_index('idx_ai_responses_confidence', table_name='ai_responses')
    op.drop_index('idx_ai_responses_attempt', table_name='ai_responses')
    op.drop_table('ai_responses')
    op.drop_index('idx_queries_user_created', table_name='queries')
    op.drop_index('idx_queries_type', table_name='queries')
    op.drop_index('idx_queries_status', table_name='queries')
    op.drop_index('idx_queries_rating', table_name='queries')
    op.drop_index('idx_queries_priority', table_name='queries')
    op.drop_index('idx_queries_org_created', table_name='queries')
    op.drop_table('queries')
    op.drop_index('idx_data_access_logs_user_accessed', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_type', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_session', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_data_type', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_accessor', table_name='data_access_logs')
    op.drop_index('idx_data_access_logs_accessed', table_name='data_access_logs')
    op.drop_table('data_access_logs')
    op.drop_index('idx_security_events_user', table_name='security_events')
    op.drop_index('idx_security_events_type', table_name='security_events')
    op.drop_index('idx_security_events_status', table_name='security_events')
    op.drop_index('idx_security_events_severity', table_name='security_events')
    op.drop_index('idx_security_events_risk', table_name='security_events')
    op.drop_index('idx_security_events_org', table_name='security_events')
    op.drop_index('idx_security_events_occurred', table_name='security_events')
    op.drop_index('idx_security_events_category', table_name='security_events')
    op.drop_table('security_events')
    op.drop_index('idx_privacy_settings_user', table_name='privacy_settings')
    op.drop_index('idx_privacy_settings_org', table_name='privacy_settings')
    op.drop_index('idx_privacy_settings_level', table_name='privacy_settings')
    op.drop_table('privacy_settings')
    op.drop_index('idx_gdpr_requests_user', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_type', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_submitted', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_status', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_reference', table_name='gdpr_requests')
    op.drop_index('idx_gdpr_requests_org', table_name='gdpr_requests')
    op.drop_table('gdpr_requests')
    op.drop_index('idx_consent_records_user_type', table_name='consent_records')
    op.drop_index('idx_consent_records_org_type', table_name='consent_records')
    op.drop_index('idx_consent_records_given', table_name='consent_records')
    op.drop_index('idx_consent_records_expires', table_name='consent_records')
    op.drop_index('idx_consent_records_created', table_name='consent_records')
    op.drop_table('consent_records')
    op.drop_index('idx_brief_templates_type', table_name='brief_templates')
    op.drop_index('idx_brief_templates_rating', table_name='brief_templates')
    op.drop_index('idx_brief_templates_public', table_name='brief_templates')
    op.drop_index('idx_brief_templates_org', table_name='brief_templates')
    op.drop_index('idx_brief_templates_category', table_name='brief_templates')
    op.drop_index('idx_brief_templates_active', table_name='brief_templates')
    op.drop_table('brief_templates')
    op.drop_index('idx_audit_logs_user_created', table_name='audit_logs')
    op.drop_index('idx_audit_logs_severity', table_name='audit_logs')
    op.drop_index('idx_audit_logs_session', table_name='audit_logs')
    op.drop_index('idx_audit_logs_risk', table_name='audit_logs')
    op.drop_index('idx_audit_logs_resource', table_name='audit_logs')
    op.drop_index('idx_audit_logs_org_created', table_name='audit_logs')
    op.drop_index('idx_audit_logs_created', table_name='audit_logs')
    op.drop_index('idx_audit_logs_category', table_name='audit_logs')
    op.drop_index('idx_audit_logs_action_type', table_name='audit_logs')
    op.drop_table('audit_logs')
    # ### end Alembic commands ###
